/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ApplicationGatewayBackendHealthHttpSettings class.
 * @constructor
 * Application gateway backendhealth http settings.
 *
 * @member {object} [backendHttpSettings] Reference of application gateway
 * backend http settings resource.
 * 
 * @member {number} [backendHttpSettings.port] Port
 * 
 * @member {string} [backendHttpSettings.protocol] Protocol. Possible values
 * include: 'Http', 'Https'
 * 
 * @member {string} [backendHttpSettings.cookieBasedAffinity] Cookie affinity.
 * Possible values include: 'Enabled', 'Disabled'
 * 
 * @member {number} [backendHttpSettings.requestTimeout] Request timeout
 * 
 * @member {object} [backendHttpSettings.probe] Probe resource of application
 * gateway
 * 
 * @member {string} [backendHttpSettings.probe.id] Resource Id
 * 
 * @member {array} [backendHttpSettings.authenticationCertificates] Array of
 * references to Application Gateway Authentication Certificates
 * 
 * @member {string} [backendHttpSettings.provisioningState] Provisioning state
 * of the backend http settings resource Updating/Deleting/Failed
 * 
 * @member {string} [backendHttpSettings.name] Name of the resource that is
 * unique within a resource group. This name can be used to access the
 * resource
 * 
 * @member {string} [backendHttpSettings.etag] A unique read-only string that
 * changes whenever the resource is updated
 * 
 * @member {array} [servers] List of application gateway backendhealth servers.
 * 
 */
function ApplicationGatewayBackendHealthHttpSettings() {
}

/**
 * Defines the metadata of ApplicationGatewayBackendHealthHttpSettings
 *
 * @returns {object} metadata of ApplicationGatewayBackendHealthHttpSettings
 *
 */
ApplicationGatewayBackendHealthHttpSettings.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ApplicationGatewayBackendHealthHttpSettings',
    type: {
      name: 'Composite',
      className: 'ApplicationGatewayBackendHealthHttpSettings',
      modelProperties: {
        backendHttpSettings: {
          required: false,
          serializedName: 'backendHttpSettings',
          type: {
            name: 'Composite',
            className: 'ApplicationGatewayBackendHttpSettings'
          }
        },
        servers: {
          required: false,
          serializedName: 'servers',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ApplicationGatewayBackendHealthServerElementType',
                type: {
                  name: 'Composite',
                  className: 'ApplicationGatewayBackendHealthServer'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = ApplicationGatewayBackendHealthHttpSettings;
