/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var validation = require("../../../util/validation");
var $ = utils.getLocaleString;
var constants = require("./constants");
var tagUtils = require("../tag/tagUtils");
var resourceUtils = require("../resource/resourceUtils");
var Subnet = require("./subnet");
var LoadBalancer = require("./loadBalancer");
var Nsg = require("./nsg");
var PublicIp = require("./publicIp");

function Nic(cli, networkManagementClient) {
  this.networkManagementClient = networkManagementClient;
  this.subnetCrud = new Subnet(cli, networkManagementClient);
  this.loadBalancerCrud = new LoadBalancer(cli, networkManagementClient);
  this.nsgCrud = new Nsg(cli, networkManagementClient);
  this.publicIpCrud = new PublicIp(cli, networkManagementClient);
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(Nic.prototype, {




  create: function create__1(resourceGroupName, nicName, options, _) { var self, nic, ipConfig, progress, __this = this; var __frame = { name: "create__1", line: 44 }; return __func(_, this, arguments, create__1, 3, __frame, function __$create__1() { self = __this;


      if (((!options.subnetId && !options.subnetName) && !options.subnetVnetName)) {
        return _(new Error($("--subnet-id or --subnet-name, --subnet-vnet-name parameters must be provided"))); } ;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 7, 19, function ___(__0, __1) { nic = __1;
        if (nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" already exists in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        ipConfig = {
          name: constants.nic.defaultConfigName };


        nic = {
          location: options.location,
          ipConfigurations: [] };


        return self._parseNic(resourceGroupName, nic, options, __cb(_, __frame, 21, 15, function ___(__0, __2) { nic = __2;
          return self._parseIpConfig(resourceGroupName, ipConfig, options, __cb(_, __frame, 22, 20, function ___(__0, __3) { ipConfig = __3;
            nic.ipConfigurations.push(ipConfig);

            progress = self.interaction.progress(util.format($("Creating network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

                  return self.networkManagementClient.networkInterfaces.createOrUpdate(resourceGroupName, nicName, nic, __cb(_, __frame, 27, 59, function ___(__0, __4) { nic = __4; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {


                self._showNic(nic, resourceGroupName, nicName); _(); }); }); }, true)); }, true)); }, true)); }); },


  set: function set__2(resourceGroupName, nicName, options, _) { var self, nic, __this = this; var __frame = { name: "set__2", line: 79 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        return self._parseNic(resourceGroupName, nic, options, __cb(_, __frame, 7, 15, function ___(__0, __2) { nic = __2;
          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 8, 15, function ___(__0, __3) { nic = __3;
            self._showNic(nic, resourceGroupName, nicName); _(); }, true)); }, true)); }, true)); }); },


  list: function list__3(options, _) { var self, nics, progress, __this = this; var __frame = { name: "list__3", line: 91 }; return __func(_, this, arguments, list__3, 1, __frame, function __$list__3() { self = __this;


      nics = null;
      progress = self.interaction.progress($("Getting the network interfaces")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() { return (function __$list__3(__then) {


              if (options.resourceGroup) { return (function __$list__3(__then) {
                  if (options.virtualMachineScaleSetName) { return (function __$list__3(__then) {
                      if (options.virtualMachineIndex) {
                        return self.networkManagementClient.networkInterfaces.listVirtualMachineScaleSetVMNetworkInterfaces(options.resourceGroup, options.virtualMachineScaleSetName, options.virtualMachineIndex, __cb(_, __frame, 10, 66, function ___(__0, __1) { nics = __1; __then(); }, true)); } else {

                        return self.networkManagementClient.networkInterfaces.listVirtualMachineScaleSetNetworkInterfaces(options.resourceGroup, options.virtualMachineScaleSetName, __cb(_, __frame, 12, 66, function ___(__0, __2) { nics = __2; __then(); }, true)); } ; })(__then); } else {


                    return self.networkManagementClient.networkInterfaces.list(options.resourceGroup, __cb(_, __frame, 15, 64, function ___(__0, __3) { nics = __3; __then(); }, true)); } ; })(__then); } else {


                return self.networkManagementClient.networkInterfaces.listAll(__cb(_, __frame, 18, 62, function ___(__0, __4) { nics = __4; __then(); }, true)); } ; })(function __$list__3() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(nics, function(nics) {
            if ((nics.length === 0)) {
              self.output.warn($("No network interfaces found")); }
             else {
              self.output.table(nics, function(row, nic) {
                row.cell($("Name"), nic.name);
                row.cell($("Location"), (nic.location || ""));
                var resInfo = resourceUtils.getResourceInformation(nic.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), nic.provisioningState);
                row.cell($("MAC Address"), (nic.macAddress || ""));
                row.cell($("IP forwarding"), nic.enableIPForwarding);
                row.cell($("Internal DNS name"), (nic.dnsSettings.internalDnsNameLabel || ""));
                row.cell($("Internal FQDN"), (nic.dnsSettings.internalFqdn || ""));
                if (nic.dnsSettings.internalDomainNameSuffix) {
                  row.cell($("Internal domain name suffix"), (nic.dnsSettings.internalDomainNameSuffix || "")); } ; }); } ; }); _(); }); }); }); },







  show: function show__4(resourceGroupName, nicName, options, _) { var self, nic, __this = this; var __frame = { name: "show__4", line: 138 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      nic = null; return (function __$show__4(__then) {

        if ((options.virtualMachineScaleSetName || options.virtualMachineIndex)) {
          if (!((options.virtualMachineScaleSetName && options.virtualMachineIndex))) {
            return _(new Error(util.format($("--virtual-machine-scale-set-name and --virtual-machine-index must be specified")))); } ;

          return self.getFromScaleSet(resourceGroupName, options.virtualMachineScaleSetName, options.virtualMachineIndex, nicName, __cb(_, __frame, 8, 17, function ___(__0, __1) { nic = __1; __then(); }, true)); } else {

          return self.get(resourceGroupName, nicName, __cb(_, __frame, 10, 17, function ___(__0, __2) { nic = __2; __then(); }, true)); } ; })(function __$show__4() {


        self._showNic(nic, resourceGroupName, nicName); _(); }); }); },


  get: function get__5(resourceGroupName, nicName, _) { var self, progress, nic, __this = this; var __frame = { name: "get__5", line: 154 }; return __func(_, this, arguments, get__5, 2, __frame, function __$get__5() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() {

                  return self.networkManagementClient.networkInterfaces.get(resourceGroupName, nicName, null, __cb(_, __frame, 4, 63, function ___(__0, __1) { nic = __1;
                    return _(null, nic); }, true)); }); })(function ___(e, __result) { __catch(function __$get__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__5() { _(); }); }); }); },



  getEffectiveRouteTable: function getEffectiveRouteTable__6(resourceGroupName, nicName, options, _) { var self, result, progress, __this = this; var __frame = { name: "getEffectiveRouteTable__6", line: 170 }; return __func(_, this, arguments, getEffectiveRouteTable__6, 3, __frame, function __$getEffectiveRouteTable__6() { self = __this; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getEffectiveRouteTable__6() {



            progress = self.interaction.progress($("Getting the effective route table"));
            return self.networkManagementClient.networkInterfaces.getEffectiveRouteTable(resourceGroupName, nicName, __cb(_, __frame, 5, 62, function ___(__0, __1) { result = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getEffectiveRouteTable__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getEffectiveRouteTable__6() {


          if ((result.value.length === 0)) {
            self.output.warn($("No effective route table found")); }
           else {
            self.output.table(result.value, function(row, item) {
              row.cell($("Source"), item.source);
              row.cell($("State"), item.state);
              row.cell($("Address Prefix"), item.addressPrefix);
              row.cell($("Next Hop Type"), item.nextHopType);
              row.cell($("Next Hop IP"), item.nextHopIpAddress); }); } ; _(); }); }); }); },




  listEffectiveNSG: function listEffectiveNSG__7(resourceGroupName, nicName, options, _) { var self, result, progress, tableOutput, __this = this; var __frame = { name: "listEffectiveNSG__7", line: 193 }; return __func(_, this, arguments, listEffectiveNSG__7, 3, __frame, function __$listEffectiveNSG__7() { self = __this; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listEffectiveNSG__7() {



            progress = self.interaction.progress($("Getting the effective network security groups"));
            return self.networkManagementClient.networkInterfaces.listEffectiveNetworkSecurityGroups(resourceGroupName, nicName, __cb(_, __frame, 5, 62, function ___(__0, __1) { result = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listEffectiveNSG__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listEffectiveNSG__7() {


          if ((result.value.length === 0)) {
            self.output.warn($("No effective network security groups found")); }
           else {
            tableOutput = [];
            result.value.forEach(function(item) {
              tableOutput.push({
                nic: item.networkSecurityGroup.id.substring((item.networkSecurityGroup.id.lastIndexOf("/") + 1)),
                nsg: item.association.networkInterface.id.substring((item.association.networkInterface.id.lastIndexOf("/") + 1)),
                rule: item.effectiveSecurityRules[0].name,
                access: item.effectiveSecurityRules[0].access,
                direction: item.effectiveSecurityRules[0].direction,
                protocol: item.effectiveSecurityRules[0].protocol });

              item.effectiveSecurityRules.forEach(function(rule, index) {
                if ((index !== 0)) {
                  tableOutput.push({
                    nic: "",
                    nsg: "",
                    rule: rule.name,
                    access: rule.access,
                    direction: rule.direction,
                    protocol: rule.protocol }); } ; }); });




            self.output.table(tableOutput, function(row, item) {
              row.cell($("NIC Name"), item.nic);
              row.cell($("NSG Name"), item.nsg);
              row.cell($("Rule Name"), item.rule);
              row.cell($("Protocol"), item.protocol);
              row.cell($("Direction"), item.direction);
              row.cell($("Access"), item.access); }); } ; _(); }); }); }); },




  getFromScaleSet: function getFromScaleSet__8(resourceGroupName, virtualMachineScaleSetName, virtualMachineIndex, nicName, _) { var self, progress, nic, __this = this; var __frame = { name: "getFromScaleSet__8", line: 240 }; return __func(_, this, arguments, getFromScaleSet__8, 4, __frame, function __$getFromScaleSet__8() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network interface \"%s\" in scale set \"%s\""), nicName, virtualMachineScaleSetName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getFromScaleSet__8() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getFromScaleSet__8() {

                  return self.networkManagementClient.networkInterfaces.getVirtualMachineScaleSetNetworkInterface(resourceGroupName, virtualMachineScaleSetName, virtualMachineIndex, nicName, null, __cb(_, __frame, 4, 63, function ___(__0, __1) { nic = __1;
                    return _(null, nic); }, true)); }); })(function ___(e, __result) { __catch(function __$getFromScaleSet__8() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getFromScaleSet__8() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getFromScaleSet__8() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getFromScaleSet__8() { _(); }); }); }); },



  delete: function delete__9(resourceGroupName, nicName, options, _) { var self, nic, progress, __this = this; var __frame = { name: "delete__9", line: 256 }; return __func(_, this, arguments, delete__9, 3, __frame, function __$delete__9() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __2) { nic = __2;

        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ; return (function __$delete__9(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete network interface \"%s\"? [y/n] "), nicName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -255, 17, function ___(__0, __3) { return (function __$delete__9(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__9() {



            progress = self.interaction.progress(util.format($("Deleting network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__9() {

                  return self.networkManagementClient.networkInterfaces.deleteMethod(resourceGroupName, nicName, __cb(_, __frame, 14, 53, function __$delete__9() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__9() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__9() { _(); }); }); }); }, true)); }, true)); }); },



  update: function update__10(resourceGroupName, nicName, nic, _) { var self, progress, __this = this; var __frame = { name: "update__10", line: 276 }; return __func(_, this, arguments, update__10, 3, __frame, function __$update__10() { self = __this;

      progress = self.interaction.progress(util.format($("Updating network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$update__10() {

            return self.networkManagementClient.networkInterfaces.createOrUpdate(resourceGroupName, nicName, nic, __cb(_, __frame, 4, 59, function ___(__0, __1) { nic = __1;
              return _(null, nic); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$update__10() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$update__10() { _(); }); }); }); },






  createIpConfig: function createIpConfig__11(resourceGroupName, nicName, ipConfigName, options, _) { var self, nic, ipConfig, __this = this; var __frame = { name: "createIpConfig__11", line: 290 }; return __func(_, this, arguments, createIpConfig__11, 4, __frame, function __$createIpConfig__11() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __2) { nic = __2;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        ipConfig = {
          name: ipConfigName };


        if (utils.findFirstCaseIgnore(nic.ipConfigurations, { name: ipConfigName })) {
          return _(new Error(util.format($("IP configuration with name \"%s\" already exists in the nic \"%s\""), ipConfigName, nicName))); } ; return (function __$createIpConfig__11(_) {


          var __1 = (options.isPrimary && !options.quiet); if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($(("There is a primary IP configurator already. " + "Do you want to make new config primary? [y/n] "))), __cb(_, __frame, 15, 65, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -289, 17, function ___(__0, __3) { return (function __$createIpConfig__11(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$createIpConfig__11() {




            self._changePrimaryConfig(nic, ipConfig, options.isPrimary);
            return self._parseIpConfig(resourceGroupName, ipConfig, options, __cb(_, __frame, 21, 20, function ___(__0, __4) { ipConfig = __4;

              nic.ipConfigurations.push(ipConfig);
              return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 24, 15, function ___(__0, __5) { nic = __5;
                self._showNic(nic); _(); }, true)); }, true), nic); }); }, true)); }, true)); }); },


  setIpConfig: function setIpConfig__12(resourceGroupName, nicName, ipConfigName, options, _) { var self, nic, ipConfig, __this = this; var __frame = { name: "setIpConfig__12", line: 318 }; return __func(_, this, arguments, setIpConfig__12, 4, __frame, function __$setIpConfig__12() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        ipConfig = utils.findFirstCaseIgnore(nic.ipConfigurations, { name: ipConfigName });
        if (!ipConfig) {
          return _(new Error(util.format($("IP configuration with name \"%s\" not found in the nic \"%s\""), ipConfigName, nicName))); } ;


        if (options.isPrimary) {
          self._changePrimaryConfig(nic, ipConfig, options.isPrimary); } ;


        return self._parseIpConfig(resourceGroupName, ipConfig, options, __cb(_, __frame, 17, 9, function __$setIpConfig__12() {
          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 18, 15, function ___(__0, __2) { nic = __2;
            self._showNic(nic); _(); }, true)); }, true), nic); }, true)); }); },


  listIpConfigs: function listIpConfigs__13(resourceGroupName, nicName, options, _) { var self, nic, __this = this; var __frame = { name: "listIpConfigs__13", line: 340 }; return __func(_, this, arguments, listIpConfigs__13, 3, __frame, function __$listIpConfigs__13() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        self.interaction.formatOutput(nic.ipConfigurations, function(ipConfigurations) {
          if ((ipConfigurations.length === 0)) {
            self.output.warn($("No ip configurations found")); }
           else {
            self.output.table(ipConfigurations, function(row, ipConfig) {
              row.cell($("Name"), ipConfig.name);
              row.cell($("Provisioning state"), ipConfig.provisioningState);
              row.cell($("Primary"), ipConfig.primary);
              row.cell($("Private IP allocation"), ipConfig.privateIPAllocationMethod);
              row.cell($("Private IP version"), ipConfig.privateIPAddressVersion);
              row.cell($("Private IP address"), (ipConfig.privateIPAddress || ""));

              var subnetName = "";
              if (ipConfig.subnet) {
                subnetName = resourceUtils.getResourceInformation(ipConfig.subnet.id).resourceName; } ;

              row.cell($("Subnet"), subnetName);

              var publicIpName = "";
              if (ipConfig.publicIPAddress) {
                publicIpName = resourceUtils.getResourceInformation(ipConfig.publicIPAddress.id).resourceName; } ;

              row.cell($("Public IP"), publicIpName); }); } ; }); _(); }, true)); }); },





  showIpConfig: function showIpConfig__14(resourceGroupName, nicName, ipConfigName, options, _) { var self, nic, ipConfig, __this = this; var __frame = { name: "showIpConfig__14", line: 376 }; return __func(_, this, arguments, showIpConfig__14, 4, __frame, function __$showIpConfig__14() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        ipConfig = utils.findFirstCaseIgnore(nic.ipConfigurations, { name: ipConfigName });
        self._showIpConfig(ipConfig, nicName, ipConfigName); _(); }, true)); }); },


  deleteIpConfig: function deleteIpConfig__15(resourceGroupName, nicName, ipConfigName, options, _) { var self, nic, index, __this = this; var __frame = { name: "deleteIpConfig__15", line: 388 }; return __func(_, this, arguments, deleteIpConfig__15, 4, __frame, function __$deleteIpConfig__15() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __2) { nic = __2;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        index = utils.indexOfCaseIgnore(nic.ipConfigurations, { name: ipConfigName });
        if ((index === -1)) {
          return _(new Error(util.format($("IP configuration with name \"%s\" not found in the nic \"%s\""), ipConfigName, nicName))); } ; return (function __$deleteIpConfig__15(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete ip configuration \"%s\" ? [y/n] "), ipConfigName), __cb(_, __frame, 13, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -387, 17, function ___(__0, __3) { return (function __$deleteIpConfig__15(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteIpConfig__15() {



            nic.ipConfigurations.splice(index, 1);

            return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 19, 15, function ___(__0, __4) { nic = __4;
              self._showNic(nic); _(); }, true)); }); }, true)); }, true)); }); },





  createBackendAddressPool: function createBackendAddressPool__16(resourceGroupName, nicName, ipConfigName, options, _) { var __this = this; var __frame = { name: "createBackendAddressPool__16", line: 414 }; return __func(_, this, arguments, createBackendAddressPool__16, 4, __frame, function __$createBackendAddressPool__16() {
      return __this._updateBackendAddressPool(resourceGroupName, nicName, ipConfigName, options, true, __cb(_, __frame, 1, 9, function __$createBackendAddressPool__16() { _(); }, true)); }); },


  deleteBackendAddressPool: function deleteBackendAddressPool__17(resourceGroupName, nicName, ipConfigName, options, _) { var __this = this; var __frame = { name: "deleteBackendAddressPool__17", line: 418 }; return __func(_, this, arguments, deleteBackendAddressPool__17, 4, __frame, function __$deleteBackendAddressPool__17() {
      return __this._updateBackendAddressPool(resourceGroupName, nicName, ipConfigName, options, false, __cb(_, __frame, 1, 9, function __$deleteBackendAddressPool__17() { _(); }, true)); }); },





  createInboundNatRule: function createInboundNatRule__18(resourceGroupName, nicName, ipConfigName, options, _) { var __this = this; var __frame = { name: "createInboundNatRule__18", line: 425 }; return __func(_, this, arguments, createInboundNatRule__18, 4, __frame, function __$createInboundNatRule__18() {
      return __this._updateInboundNatRule(resourceGroupName, nicName, ipConfigName, options, true, __cb(_, __frame, 1, 9, function __$createInboundNatRule__18() { _(); }, true)); }); },


  deleteInboundNatRule: function deleteInboundNatRule__19(resourceGroupName, nicName, ipConfigName, options, _) { var __this = this; var __frame = { name: "deleteInboundNatRule__19", line: 429 }; return __func(_, this, arguments, deleteInboundNatRule__19, 4, __frame, function __$deleteInboundNatRule__19() {
      return __this._updateInboundNatRule(resourceGroupName, nicName, ipConfigName, options, false, __cb(_, __frame, 1, 9, function __$deleteInboundNatRule__19() { _(); }, true)); }); },





  _changePrimaryConfig: function(nic, ipConfig, isPrimary) {
    if (!isPrimary) {
      return; } ;

    isPrimary = utils.parseBool(isPrimary, "--is-primary");
    if ((isPrimary === true)) {
      for (var i in nic.ipConfigurations) {
        nic.ipConfigurations[i].primary = false; } };

    ipConfig.primary = isPrimary; },


  _parseNic: function _parseNic__20(resourceGroupName, nic, options, _) { var self, nsg, __this = this; var __frame = { name: "_parseNic__20", line: 448 }; return __func(_, this, arguments, _parseNic__20, 3, __frame, function __$_parseNic__20() { self = __this; return (function __$_parseNic__20(__then) {


        if (options.networkSecurityGroupId) {
          if (options.networkSecurityGroupName) { self.output.warn($("--network-security-group-name parameter will be ignored because --network-security-group-id and --network-security-group-name are mutually exclusive")); } ;
          if (utils.argHasValue(options.networkSecurityGroupId)) {
            nic.networkSecurityGroup = {
              id: options.networkSecurityGroupId }; }

           else {
            delete nic.networkSecurityGroup; } ; __then(); } else { return (function __$_parseNic__20(__then) {

            if (options.networkSecurityGroupName) { return (function __$_parseNic__20(__then) {
                if (utils.argHasValue(options.networkSecurityGroupName)) {
                  return self.nsgCrud.get(resourceGroupName, options.networkSecurityGroupName, __cb(_, __frame, 14, 31, function ___(__0, __1) { nsg = __1;
                    if (!nsg) {
                      return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), options.networkSecurityGroupName, resourceGroupName))); } ;

                    nic.networkSecurityGroup = {
                      id: nsg.id }; __then(); }, true)); } else {


                  delete nic.networkSecurityGroup; __then(); } ; })(__then); } else { __then(); } ; })(__then); } ; })(function __$_parseNic__20() {



        if (options.internalDnsNameLabel) {
          if (utils.argHasValue(options.internalDnsNameLabel)) {
            if (!nic.dnsSettings) { nic.dnsSettings = { }; } ;
            nic.dnsSettings.internalDnsNameLabel = options.internalDnsNameLabel; }
           else {
            delete nic.dnsSettings; } ; } ;



        if (options.enableIpForwarding) {
          nic.enableIPForwarding = utils.parseBool(options.enableIpForwarding, "--enable-ip-forwarding"); } ;


        if (options.tags) {
          if (utils.argHasValue(options.tags)) {
            tagUtils.appendTags(nic, options); }
           else {
            nic.tags = { }; } ; } ;



        return _(null, nic); }); }); },


  _parseIpConfig: function _parseIpConfig__21(resourceGroupName, ipConfig, options, _, nic) { var self, primaryIpConfig, subnet, publicIp, poolIds, natIds, __this = this; var __frame = { name: "_parseIpConfig__21", line: 498 }; return __func(_, this, arguments, _parseIpConfig__21, 3, __frame, function __$_parseIpConfig__21() { self = __this;

      if (options.privateIpVersion) {
        ipConfig.privateIPAddressVersion = validation.isIn(options.privateIpVersion, constants.publicIp.version, "--private-ip-version"); }
       else {
        options.privateIpVersion = constants.publicIp.version[0]; } ;

      if (((((nic && options.privateIpVersion) && (options.privateIpVersion.toLowerCase() === constants.publicIp.version[0].toLowerCase())) && !options.subnetId) && !options.subnetName)) {
        primaryIpConfig = utils.findFirstCaseIgnore(nic.ipConfigurations, { primary: true });
        options.subnetId = primaryIpConfig.subnet.id; } ;


      if (options.privateIpAddress) {
        ipConfig.privateIPAddress = validation.isIP(options.privateIpAddress, "--private-ip-address");
        ipConfig.privateIPAllocationMethod = "Static"; } ; return (function __$_parseIpConfig__21(__then) {


        if (options.subnetId) {
          if ((options.subnetName || options.subnetVnetName)) {
            self.output.warn($("--subnet-name, --subnet-vnet-name parameters will be ignored because --subnet-name, --subnet-vnet-name and --subnet-id are mutually exclusive")); } ;

          ipConfig.subnet = {
            id: options.subnetId }; __then(); } else { return (function __$_parseIpConfig__21(__then) {

            if ((options.subnetName && options.subnetVnetName)) {
              return self.subnetCrud.get(resourceGroupName, options.subnetVnetName, options.subnetName, __cb(_, __frame, 25, 35, function ___(__0, __1) { subnet = __1;
                if (!subnet) {
                  return _(new Error(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), options.subnetName, resourceGroupName))); } ;

                ipConfig.subnet = {
                  id: subnet.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseIpConfig__21() { return (function __$_parseIpConfig__21(__then) {



          if (options.publicIpId) {
            if (options.publicIpName) { self.output.warn($("--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive")); } ;
            if (utils.argHasValue(options.publicIpId)) {
              ipConfig.publicIPAddress = {
                id: options.publicIpId }; }

             else {
              delete ipConfig.publicIPAddress; } ; __then(); } else { return (function __$_parseIpConfig__21(__then) {

              if (options.publicIpName) { return (function __$_parseIpConfig__21(__then) {
                  if (utils.argHasValue(options.publicIpName)) {
                    return self.publicIpCrud.get(resourceGroupName, options.publicIpName, __cb(_, __frame, 45, 41, function ___(__0, __2) { publicIp = __2;
                      if (!publicIp) {
                        return _(new Error(util.format($("A public ip address with name \"%s\" not found in the resource group \"%s\""), options.publicIpName, resourceGroupName))); } ;

                      ipConfig.publicIPAddress = {
                        id: publicIp.id }; __then(); }, true)); } else {


                    delete ipConfig.publicIPAddress; __then(); } ; })(__then); } else {

                if (((options.publicIpId === "") || (options.publicIpName === ""))) {
                  ipConfig.publicIPAddress = { }; } ; __then(); } ; })(__then); } ; })(function __$_parseIpConfig__21() {


          if (options.lbAddressPoolIds) {
            if (utils.argHasValue(options.lbAddressPoolIds)) {
              ipConfig.loadBalancerBackendAddressPools = [];
              poolIds = options.lbAddressPoolIds.split(",");
              poolIds.forEach(function(poolId) {
                poolId = poolId.replace(/'|''$/gm, "");
                var pool = {
                  id: poolId };

                ipConfig.loadBalancerBackendAddressPools.push(pool); }); }

             else {
              ipConfig.loadBalancerBackendAddressPools = []; } ; } ;



          if (options.lbInboundNatRuleIds) {
            if (utils.argHasValue(options.lbInboundNatRuleIds)) {
              ipConfig.loadBalancerInboundNatRules = [];
              natIds = options.lbInboundNatRuleIds.split(",");
              natIds.forEach(function(natId) {
                natId = natId.replace(/'|''$/gm, "");
                var nat = {
                  id: natId };

                ipConfig.loadBalancerInboundNatRules.push(nat); }); }

             else {
              ipConfig.loadBalancerInboundNatRules = []; } ; } ;



          return _(null, ipConfig); }); }); }); },


  _showNic: function(nic, resourceGroupName, nicName) {
    var self = this;

    self.interaction.formatOutput(nic, function(nic) {
      if ((nic === null)) {
        self.output.warn(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName));
        return; } ;


      self.output.nameValue($("Id"), nic.id);
      self.output.nameValue($("Name"), nic.name);
      self.output.nameValue($("Type"), nic.type);
      self.output.nameValue($("Location"), nic.location);
      self.output.nameValue($("Provisioning state"), nic.provisioningState);
      self.output.nameValue($("Tags"), tagUtils.getTagsInfo(nic.tags));
      self.output.nameValue($("MAC address"), nic.macAddress);
      self.output.nameValue($("Internal DNS name label"), nic.dnsSettings.internalDnsNameLabel);
      self.output.nameValue($("Internal FQDN"), nic.dnsSettings.internalFqdn);
      self.output.nameValue($("Internal domain name suffix"), nic.dnsSettings.internalDomainNameSuffix);
      self.output.nameValue($("Enable IP forwarding"), nic.enableIPForwarding);

      if (nic.networkSecurityGroup) {
        self.output.nameValue($("Network security group"), nic.networkSecurityGroup.id); } ;

      if (nic.virtualMachine) {
        self.output.nameValue($("Virtual machine"), nic.virtualMachine.id); } ;


      self.output.header($("IP configurations"));
      nic.ipConfigurations.forEach(function(ipConfig) {
        self._showIpConfig(ipConfig, nicName, ipConfig.name);
        self.output.data($(""), ""); }); }); },




  _showIpConfig: function(ipConfig, nicName, ipConfigName) {
    var self = this;
    var configIndent = 2;
    var subItemsIndent = 4;

    self.interaction.formatOutput(ipConfig, function(ipConfig) {
      if (((ipConfig === null) || (ipConfig === undefined))) {
        self.output.warn(util.format($("IP configuration with name \"%s\" not found in the nic \"%s\""), ipConfigName, nicName));
        return; } ;


      self.output.nameValue($("Name"), ipConfig.name, configIndent);
      self.output.nameValue($("Primary"), ipConfig.primary, configIndent);
      self.output.nameValue($("Provisioning state"), ipConfig.provisioningState, configIndent);
      self.output.nameValue($("Private IP address"), ipConfig.privateIPAddress, configIndent);
      self.output.nameValue($("Private IP version"), ipConfig.privateIPAddressVersion, configIndent);
      self.output.nameValue($("Private IP allocation method"), ipConfig.privateIPAllocationMethod, configIndent);
      if (ipConfig.publicIPAddress) {
        self.output.nameValue($("Public IP address"), ipConfig.publicIPAddress.id, configIndent); } ;

      if (ipConfig.subnet) {
        self.output.nameValue($("Subnet"), ipConfig.subnet.id, configIndent); } ;


      if ((ipConfig.loadBalancerBackendAddressPools && (ipConfig.loadBalancerBackendAddressPools.length > 0))) {
        self.output.header($("Load balancer backend address pools"), configIndent);
        ipConfig.loadBalancerBackendAddressPools.forEach(function(pool) {
          self.output.nameValue($("Id"), pool.id, subItemsIndent); }); } ;


      if ((ipConfig.loadBalancerInboundNatRules && (ipConfig.loadBalancerInboundNatRules.length > 0))) {
        self.output.header($("Load balancer inbound NAT rules"), configIndent);
        ipConfig.loadBalancerInboundNatRules.forEach(function(rule) {
          self.output.nameValue($("Id"), rule.id, subItemsIndent); }); } ; }); },





  _updateBackendAddressPool: function _updateBackendAddressPool__22(resourceGroupName, nicName, ipConfigName, options, isAdding, _) { var self, nic, ipConfig, poolId, lb, pool, index, __this = this; var __frame = { name: "_updateBackendAddressPool__22", line: 667 }; return __func(_, this, arguments, _updateBackendAddressPool__22, 5, __frame, function __$_updateBackendAddressPool__22() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;



        if (ipConfigName) {
          ipConfig = utils.findFirstCaseIgnore(nic.ipConfigurations, { name: ipConfigName });
          if (!ipConfig) {
            return _(new Error(util.format($("An ip configuration with name \"%s\" not found in the nic \"%s\""), ipConfigName, nicName))); } ; }

         else {
          ipConfig = nic.ipConfigurations[0];
          self.output.warn(util.format($("--ip-config-name not specified, using \"%s\" ip configuration"), ipConfig.name)); } ;



        poolId = null;
        if (!ipConfig.loadBalancerBackendAddressPools) {
          ipConfig.loadBalancerBackendAddressPools = []; } ;


        if (((!options.lbAddressPoolId && !options.lbName) && !options.lbAddressPoolName)) {
          return _(new Error($("You must specify --lb-address-pool-id or --lb-name, --lb-address-pool-name"))); } ; return (function __$_updateBackendAddressPool__22(__then) {


          if (options.lbAddressPoolId) {
            if ((options.lbName || options.lbAddressPoolName)) {
              self.output.warn("--lb-name parameter, --lb-address-pool-name will be ignored"); } ;

            poolId = options.lbAddressPoolId; __then(); } else { return (function __$_updateBackendAddressPool__22(__then) {
              if ((options.lbName || options.lbAddressPoolName)) {
                if (!options.lbName) {
                  return _(new Error($("You must specify --lb-name parameter if --lb-address-pool-name is specified"))); } ;

                if (!options.lbAddressPoolName) {
                  return _(new Error($("You must specify --lb-address-pool-name parameter if --lb-name is specified"))); } ;


                return self.loadBalancerCrud.get(resourceGroupName, options.lbName, __cb(_, __frame, 42, 37, function ___(__0, __2) { lb = __2;
                  if (!lb) {
                    return _(new Error(util.format($("A load balancer with name \"%s\" not found in the resource group \"%s"), options.lbName, resourceGroupName))); } ;


                  pool = utils.findFirstCaseIgnore(lb.backendAddressPools, { name: options.lbAddressPoolName });
                  if (!pool) {
                    return _(new Error(util.format($("A backend address pool with name \"%s\" not found in the load balancer \"%s\" resource group \"%s\""), options.lbAddressPoolName, options.lbName, resourceGroupName))); } ;

                  poolId = pool.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_updateBackendAddressPool__22() {


          if (isAdding) {
            if (utils.findFirstCaseIgnore(ipConfig.loadBalancerBackendAddressPools, { id: poolId })) {
              return _(new Error(util.format($("Specified backend address pool already attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ;

            ipConfig.loadBalancerBackendAddressPools.push({ id: poolId }); }
           else {
            index = utils.indexOfCaseIgnore(ipConfig.loadBalancerBackendAddressPools, { id: poolId });
            if ((index === -1)) {
              return _(new Error(util.format($("Backend address pool is not attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ;

            ipConfig.loadBalancerBackendAddressPools.splice(index, 1); } ;


          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 67, 15, function ___(__0, __3) { nic = __3;
            self._showNic(nic); _(); }, true)); }); }, true)); }); },


  _updateInboundNatRule: function _updateInboundNatRule__23(resourceGroupName, nicName, ipConfigName, options, isAdding, _) { var self, nic, ipConfig, ruleId, lb, rule, index, __this = this; var __frame = { name: "_updateInboundNatRule__23", line: 738 }; return __func(_, this, arguments, _updateInboundNatRule__23, 5, __frame, function __$_updateInboundNatRule__23() { self = __this;


      return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;



        if (ipConfigName) {
          ipConfig = utils.findFirstCaseIgnore(nic.ipConfigurations, { name: ipConfigName });
          if (!ipConfig) {
            return _(new Error(util.format($("An ip configuration with name \"%s\" not found in the nic \"%s\""), ipConfigName, nicName))); } ; }

         else {
          ipConfig = nic.ipConfigurations[0];
          self.output.warn(util.format($("--ip-config-name not specified, using \"%s\" ip configuration"), ipConfig.name)); } ;



        ruleId = null;
        if (!ipConfig.loadBalancerInboundNatRules) {
          ipConfig.loadBalancerInboundNatRules = []; } ;


        if (((!options.lbInboundNatRuleId && !options.lbName) && !options.lbInboundNatRuleName)) {
          return _(new Error($("You must specify --lb-inbound-nat-rule-id or --lb-name, --lb-inbound-nat-rule-name"))); } ; return (function __$_updateInboundNatRule__23(__then) {


          if (options.lbInboundNatRuleId) {
            if ((options.lbName || options.lbInboundNatRuleName)) {
              self.output.warn("--lb-name, --lb-inbound-nat-rule-name will be ignored"); } ;

            ruleId = options.lbInboundNatRuleId; __then(); } else { return (function __$_updateInboundNatRule__23(__then) {
              if ((options.lbName || options.lbInboundNatRuleName)) {
                if (!options.lbName) {
                  return _(new Error($("You must specify --lb-name parameter if --lb-inbound-nat-rule-name is specified"))); } ;

                if (!options.lbInboundNatRuleName) {
                  return _(new Error($("You must specify --lb-inbound-nat-rule-name parameter if --lb-name is specified"))); } ;


                return self.loadBalancerCrud.get(resourceGroupName, options.lbName, __cb(_, __frame, 42, 37, function ___(__0, __2) { lb = __2;
                  if (!lb) {
                    return _(new Error(util.format($("A load balancer with name \"%s\" not found in the resource group \"%s"), options.lbName, resourceGroupName))); } ;


                  rule = utils.findFirstCaseIgnore(lb.inboundNatRules, { name: options.lbInboundNatRuleName });
                  if (!rule) {
                    return _(new Error(util.format($("An inbound NAT rule with name \"%s\" not found in the load balancer \"%s\""), options.lbInboundNatRuleName, options.lbName))); }
                   else {
                    ruleId = rule.id; } ; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_updateInboundNatRule__23() {



          if (isAdding) {
            if (!utils.findFirstCaseIgnore(ipConfig.loadBalancerInboundNatRules, { id: ruleId })) {
              ipConfig.loadBalancerInboundNatRules.push({ id: ruleId }); }
             else {
              return _(new Error(util.format($("Inbound NAT rule already attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; }

           else {
            index = utils.indexOfCaseIgnore(ipConfig.loadBalancerInboundNatRules, { id: ruleId });
            if ((index !== -1)) {
              ipConfig.loadBalancerInboundNatRules.splice(index, 1); }
             else {
              return _(new Error(util.format($("Inbound NAT rule is not attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; } ;



          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 70, 15, function ___(__0, __3) { nic = __3;
            self._showNic(nic); _(); }, true)); }); }, true)); }); }});



module.exports = Nic;
