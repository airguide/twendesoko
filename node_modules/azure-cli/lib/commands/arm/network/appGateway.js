/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var constants = require("./constants");
var fs = require("fs");
var profile = require("../../../util/profile");
var PublicIp = require("./publicIp");
var resourceUtils = require("../resource/resourceUtils");
var Subnet = require("./subnet");
var tagUtils = require("../tag/tagUtils");
var util = require("util");
var utils = require("../../../util/utils");
var generatorUtils = require("../../../util/generatorUtils");
var VNetUtil = require("../../../util/vnet.util");
var validation = require("../../../util/validation");
var $ = utils.getLocaleString;

function AppGateways(cli, networkManagementClient) {
  this.interaction = cli.interaction;
  this.networkManagementClient = networkManagementClient;
  this.output = cli.output;
  this.publicIpCrud = new PublicIp(cli, networkManagementClient);
  this.subnetCrud = new Subnet(cli, networkManagementClient);
  this.vnetUtil = new VNetUtil();};


__.extend(AppGateways.prototype, {
  createAppGateway: function createAppGateway__1(resourceGroup, appGatewayName, location, options, _) { var self, appGateway, subnetId, subnet, parameters, frontendIpID, frontendPortID, poolID, settingsID, listenerID, capacity, data, certID, progress, createdAppGateway, __this = this; var __frame = { name: "createAppGateway__1", line: 41 }; return __func(_, this, arguments, createAppGateway__1, 4, __frame, function __$createAppGateway__1() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" already exists in resource group \"%s\""), appGatewayName, resourceGroup))); } ; return (function __$createAppGateway__1(__then) {


          if (options.subnetId) {
            subnetId = options.subnetId; __then(); } else {

            return self.subnetCrud.get(resourceGroup, options.vnetName, options.subnetName, __cb(_, __frame, 10, 35, function ___(__0, __2) { subnet = __2;
              if (!subnet) {
                return _(new Error(util.format($("Subnet \"%s\" not found in virtual network \"%s\""), options.subnetName, options.vnetName))); } ;

              subnetId = subnet.id; __then(); }, true)); } ; })(function __$createAppGateway__1() {


          parameters = self._setDefaultAttributes(options);
          self.subscriptionId = self._getSubscriptionId(options);
          frontendIpID = self._generateResourceId(resourceGroup, appGatewayName, "frontendIPConfigurations", parameters.frontendIpName);
          frontendPortID = self._generateResourceId(resourceGroup, appGatewayName, "frontendPorts", parameters.frontendPortName);
          poolID = self._generateResourceId(resourceGroup, appGatewayName, "backendAddressPools", parameters.addressPoolName);
          settingsID = self._generateResourceId(resourceGroup, appGatewayName, "backendHttpSettingsCollection", parameters.httpSettingsName);
          listenerID = self._generateResourceId(resourceGroup, appGatewayName, "httpListeners", parameters.httpListenerName);

          appGateway = {
            name: appGatewayName,
            location: location,
            gatewayIPConfigurations: [{
              name: parameters.gatewayIpName,
              subnet: { id: subnetId } },],

            frontendPorts: [{
              name: parameters.frontendPortName,
              port: parseInt(parameters.frontendPort) },],

            backendAddressPools: [{
              name: parameters.addressPoolName,
              backendAddresses: self._parseDnsServers(options),
              backendIPConfiguration: [] },],

            backendHttpSettingsCollection: [{
              name: parameters.httpSettingsName,
              protocol: parameters.httpSettingsProtocol,
              port: parseInt(parameters.httpSettingsPort),
              cookieBasedAffinity: parameters.httpSettingsCookieBasedAffinity },],

            httpListeners: [{
              name: parameters.httpListenerName,
              frontendIPConfiguration: { id: frontendIpID },
              frontendPort: { id: frontendPortID },
              protocol: parameters.httpListenerProtocol },],

            requestRoutingRules: [{
              name: parameters.routingRuleName,
              ruleType: parameters.routingRuleType,
              backendAddressPool: { id: poolID },
              backendHttpSettings: { id: settingsID },
              httpListener: { id: listenerID } },] };


          if (parameters.skuName) {
            utils.verifyParamExistsInCollection(constants.appGateway.sku.name, parameters.skuName, "--sku-name");
            appGateway.sku = {
              name: parameters.skuName }; } ;


          if (options.skuTier) {
            utils.verifyParamExistsInCollection(constants.appGateway.sku.tier, parameters.skuTier, "--sku-tier");
            appGateway.sku.tier = parameters.skuTier; } ;

          if (options.capacity) {
            capacity = parseInt(options.capacity);
            if (((capacity >= constants.appGateway.sku.capacity[0]) && (capacity <= constants.appGateway.sku.capacity[1]))) {
              appGateway.sku.capacity = capacity; }
             else {
              return _(new Error(util.format($("Given %s \"%s\" is invalid, supported values are: [%s]"), "--capacity", options.capacity, constants.appGateway.sku.capacity))); } ; } ;



          appGateway.frontendIPConfigurations = [];
          return self._parseFrontendIp(resourceGroup, appGatewayName, parameters.frontendIpName, parameters, __cb(_, __frame, 81, 50, function ___(__0, __3) { appGateway.frontendIPConfigurations.push(__3);

            if (parameters.certFile) {
              appGateway.sslCertificates = [];
              data = fs.readFileSync(parameters.certFile);
              appGateway.sslCertificates.push({
                name: parameters.certName,
                password: parameters.certPassword,
                data: data.toString("base64") });

              certID = self._generateResourceId(resourceGroup, appGatewayName, "sslCertificates", parameters.certName);
              appGateway.httpListeners[0].sslCertificate = {
                id: certID }; } ;



            if (utils.argHasValue(options.tags)) {
              tagUtils.appendTags(appGateway, options); }
             else {
              appGateway.tags = { }; } ;


            progress = self.interaction.progress(util.format($("Creating configuration for an application gateway \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$createAppGateway__1() {


                  return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, appGateway, __cb(_, __frame, 106, 75, function ___(__0, __4) { createdAppGateway = __4; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$createAppGateway__1() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$createAppGateway__1() {

                self._showAppGateway(createdAppGateway); _(); }); }); }, true)); }); }, true)); }); },


  setAppGateway: function setAppGateway__2(resourceGroup, appGatewayName, options, _) { var self, appGateway, capacity, __this = this; var __frame = { name: "setAppGateway__2", line: 154 }; return __func(_, this, arguments, setAppGateway__2, 3, __frame, function __$setAppGateway__2() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if (options.skuName) {
          utils.verifyParamExistsInCollection(constants.appGateway.sku.name, options.skuName, "--sku-name");
          appGateway.sku.name = options.skuName; } ;

        if (options.skuTier) {
          utils.verifyParamExistsInCollection(constants.appGateway.sku.tier, options.skuTier, "--sku-tier");
          appGateway.sku.tier = options.skuTier; } ;

        if (options.capacity) {
          capacity = parseInt(options.capacity);
          if (((capacity >= constants.appGateway.sku.capacity[0]) && (capacity <= constants.appGateway.sku.capacity[1]))) {
            appGateway.sku.capacity = capacity; }
           else {
            return _(new Error(util.format($("Given %s \"%s\" is invalid, supported values are: [%s]"), "--capacity", options.capacity, constants.appGateway.sku.capacity))); } ; } ;


        if (utils.argHasValue(options.tags)) {
          tagUtils.appendTags(appGateway, options); } ;


        self.output.warn("Application gateway set command is a long-running process. It may take up to 15-20 minutes to complete.");
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 28, 9, function __$setAppGateway__2() { _(); }, true)); }, true)); }); },


  get: function get__3(resourceGroup, appGatewayName, _) { var self, appGateway, progress, __this = this; var __frame = { name: "get__3", line: 185 }; return __func(_, this, arguments, get__3, 2, __frame, function __$get__3() { self = __this;


      progress = self.interaction.progress(util.format($("Looking up an application gateway \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__3() {

                  return self.networkManagementClient.applicationGateways.get(resourceGroup, appGatewayName, null, __cb(_, __frame, 5, 68, function ___(__0, __1) { appGateway = __1; __then(); }, true)); }); })(function ___(error, __result) { __catch(function __$get__3() { if (error) {

                    if ((error.statusCode === 404)) {
                      appGateway = null; } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__3() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__3() {

          return _(null, appGateway); }); }); }); },


  listAppGateways: function listAppGateways__4(options, _) { var self, appGateways, progress, __this = this; var __frame = { name: "listAppGateways__4", line: 201 }; return __func(_, this, arguments, listAppGateways__4, 1, __frame, function __$listAppGateways__4() { self = __this; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listAppGateways__4() { return (function __$listAppGateways__4(__then) {




              if (options.resourceGroup) {
                progress = self.interaction.progress(util.format($("Looking up application gateways in resource group \"%s\""), options.resourceGroup));
                return self.networkManagementClient.applicationGateways.list(options.resourceGroup, options, __cb(_, __frame, 7, 71, function ___(__0, __1) { appGateways = __1; __then(); }, true)); } else {

                progress = self.interaction.progress($("Looking up application gateways in all resource groups"));
                return self.networkManagementClient.applicationGateways.listAll(options, __cb(_, __frame, 10, 71, function ___(__0, __2) { appGateways = __2; __then(); }, true)); } ; })(function __$listAppGateways__4() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listAppGateways__4() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listAppGateways__4() {

          if (!appGateways) {
            self.output.warn(util.format($("No application gateways found in resource group \"%s\""), options.resourceGroup)); } ;


          self.interaction.formatOutput(appGateways, function(data) {
            if ((data.length === 0)) {
              self.output.warn(util.format($("No application gateways found in resource group \"%s\""), options.resourceGroup)); }
             else {
              self.output.table(data, function(row, gateway) {
                row.cell($("Name"), gateway.name);
                row.cell($("Provisioning state"), gateway.provisioningState);
                row.cell($("Location"), gateway.location);
                var resource = resourceUtils.getResourceInformation(gateway.id);
                row.cell($("Resource group"), resource.resourceGroup); }); } ; }); _(); }); }); }); },





  showAppGateway: function showAppGateway__5(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "showAppGateway__5", line: 235 }; return __func(_, this, arguments, showAppGateway__5, 3, __frame, function __$showAppGateway__5() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;

        if (appGateway) {
          self._showAppGateway(appGateway); }
         else {
          self.output.warn(util.format($("An application gateway with name \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup)); } ; _(); }, true)); }); },



  deleteAppGateway: function deleteAppGateway__6(resourceGroup, appGatewayName, options, _) { var self, appGateway, progress, __this = this; var __frame = { name: "deleteAppGateway__6", line: 246 }; return __func(_, this, arguments, deleteAppGateway__6, 3, __frame, function __$deleteAppGateway__6() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          self.output.warn(util.format($("An application gateway with name \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup)); return _(null); } ; return (function __$deleteAppGateway__6(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete an application gateway \"%s\"? [y/n] "), appGatewayName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -245, 17, function ___(__0, __3) { return (function __$deleteAppGateway__6(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteAppGateway__6() {



            progress = self.interaction.progress(util.format($("Deleting an application gateway \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteAppGateway__6() { return (function __$deleteAppGateway__6(__then) {

                    if (options.nowait) {
                      return self.networkManagementClient.applicationGateways.beginDeleteMethod(resourceGroup, appGatewayName, options, __cb(_, __frame, 15, 57, __then, true)); } else {

                      return self.networkManagementClient.applicationGateways.deleteMethod(resourceGroup, appGatewayName, options, __cb(_, __frame, 17, 57, __then, true)); } ; })(function __$deleteAppGateway__6() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$deleteAppGateway__6() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$deleteAppGateway__6() { _(); }); }); }); }, true)); }, true)); }); },



  startAppGateway: function startAppGateway__7(resourceGroup, appGatewayName, options, _) { var self, appGateway, progress, __this = this; var __frame = { name: "startAppGateway__7", line: 270 }; return __func(_, this, arguments, startAppGateway__7, 3, __frame, function __$startAppGateway__7() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("An application gateway with name \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;



        self.output.warn("Application gateway start command is a long-running process. It may take up to 15-20 minutes to complete.");

        progress = self.interaction.progress(util.format($("Starting an application gateway \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$startAppGateway__7() { return (function __$startAppGateway__7(__then) {

                if (options.nowait) {
                  return self.networkManagementClient.applicationGateways.beginStart(resourceGroup, appGatewayName, options, __cb(_, __frame, 13, 57, __then, true)); } else { __then(); } ; })(function __$startAppGateway__7() {

                return self.networkManagementClient.applicationGateways.start(resourceGroup, appGatewayName, options, __cb(_, __frame, 15, 55, function __$startAppGateway__7() { _(null, null, true); }, true)); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$startAppGateway__7() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$startAppGateway__7() { _(); }); }); }, true)); }); },



  stopAppGateway: function stopAppGateway__8(resourceGroup, appGatewayName, options, _) { var self, appGateway, progress, __this = this; var __frame = { name: "stopAppGateway__8", line: 291 }; return __func(_, this, arguments, stopAppGateway__8, 3, __frame, function __$stopAppGateway__8() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("An application gateway with name \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;



        progress = self.interaction.progress(util.format($("Stopping an application gateway \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$stopAppGateway__8() {

              return self.networkManagementClient.applicationGateways.stop(resourceGroup, appGatewayName, null, __cb(_, __frame, 10, 55, function __$stopAppGateway__8() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$stopAppGateway__8() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$stopAppGateway__8() { _(); }); }); }, true)); }); },



  addSsl: function addSsl__9(resourceGroup, appGatewayName, certName, options, _) { var self, appGateway, certificateObject, data, __this = this; var __frame = { name: "addSsl__9", line: 307 }; return __func(_, this, arguments, addSsl__9, 4, __frame, function __$addSsl__9() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if (utils.stringIsNullOrEmpty(options.certFile)) {
          return _(new Error($("--cert-file parameter must not be empty"))); } ;


        if (utils.stringIsNullOrEmpty(options.certPassword)) {
          return _(new Error($("--cert-password parameter must not be empty"))); } ;


        certificateObject = { password: options.certPassword, name: certName }; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$addSsl__9() {


              data = fs.readFileSync(options.certFile); __then(); }); })(function ___(e, __result) { __catch(function __$addSsl__9() { if (e) {

                if ((e.code === "ENOENT")) {
                  return _(new Error(util.format($("File \"%s\" not found"), options.certFile))); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$addSsl__9() {


            certificateObject.data = data.toString("base64");
            appGateway.sslCertificates.push(certificateObject);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 26, 9, function __$addSsl__9() { _(); }, true)); }); }); }, true)); }); },


  updateSsl: function updateSsl__10(resourceGroup, appGatewayName, sslCertName, options, _) { var self, appGateway, sslCert, index, data, __this = this; var __frame = { name: "updateSsl__10", line: 336 }; return __func(_, this, arguments, updateSsl__10, 4, __frame, function __$updateSsl__10() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        sslCert = utils.findFirstCaseIgnore(appGateway.sslCertificates, { name: sslCertName });
        if (!sslCert) {
          return _(new Error(util.format($("A SSL certificate with name \"%s\" not found in the application gateway \"%s\""), sslCertName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.sslCertificates, { name: sslCertName });
        if (utils.stringIsNullOrEmpty(options.certFile)) {
          return _(new Error($("--cert-file parameter must not be empty"))); } ;


        if (utils.stringIsNullOrEmpty(options.certPassword)) {
          return _(new Error($("--cert-password parameter must not be empty"))); } ; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$updateSsl__10() {




              data = fs.readFileSync(options.certFile); __then(); }); })(function ___(e, __result) { __catch(function __$updateSsl__10() { if (e) {

                if ((e.code === "ENOENT")) {
                  return _(new Error(util.format($("File \"%s\" not found"), options.certFile))); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$updateSsl__10() {


            sslCert.data = data.toString("base64");
            sslCert.password = options.certPassword;

            appGateway.sslCertificates[index] = sslCert;
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 33, 9, function __$updateSsl__10() { _(); }, true)); }); }); }, true)); }); },


  listSsls: function listSsls__11(resourceGroup, appGatewayName, options, _) { var self, appGateway, items, __this = this; var __frame = { name: "listSsls__11", line: 372 }; return __func(_, this, arguments, listSsls__11, 3, __frame, function __$listSsls__11() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;

        items = appGateway.sslCertificates;
        self.interaction.formatOutput(items, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway ssl cerificates found")); }
           else {
            self._listAppGatewaySslCerificates(appGateway); } ; }); _(); }, true)); }); },




  showSsl: function showSsl__12(resourceGroup, appGatewayName, sslCertName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showSsl__12", line: 388 }; return __func(_, this, arguments, showSsl__12, 4, __frame, function __$showSsl__12() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.sslCertificates, { name: sslCertName });
        if ((index === -1)) {
          return _(new Error(util.format($("A ssl cerificate with name \"%s\" not found in an application gateway \"%s\""), sslCertName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.sslCertificates[index], generatorUtils.traverse); _(); }, true)); }); },


  removeSsl: function removeSsl__13(resourceGroup, appGatewayName, certName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeSsl__13", line: 403 }; return __func(_, this, arguments, removeSsl__13, 4, __frame, function __$removeSsl__13() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.sslCertificates, { name: certName }); return (function __$removeSsl__13(__then) {
          if ((index !== -1)) { return (function __$removeSsl__13(_) {
              var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete an ssl certificate \"%s\"? [y/n] "), certName), __cb(_, __frame, 10, 46, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -402, 17, function ___(__0, __3) { return (function __$removeSsl__13(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeSsl__13() {


                appGateway.sslCertificates.splice(index, 1);
                return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 14, 11, __then, true)); }); }, true)); } else {

            return _(new Error(util.format($("SSL certificate with name \"%s\" not found for an application gateway \"%s\""), certName, appGatewayName))); } ; })(_); }, true)); }); },



  addFrontendIp: function addFrontendIp__14(resourceGroup, appGatewayName, frontendIpName, options, _) { var self, appGateway, frontendIp, __this = this; var __frame = { name: "addFrontendIp__14", line: 423 }; return __func(_, this, arguments, addFrontendIp__14, 4, __frame, function __$addFrontendIp__14() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        frontendIp = utils.findFirstCaseIgnore(appGateway.frontendIPConfigurations, { name: frontendIpName });
        if (frontendIp) {
          return _(new Error(util.format($("A frontend ip with name \"%s\" already exists for an application gateway \"%s\""), frontendIpName, appGatewayName))); } ;


        return self._parseFrontendIp(resourceGroup, appGatewayName, frontendIpName, options, __cb(_, __frame, 12, 22, function ___(__0, __2) { frontendIp = __2;
          appGateway.frontendIPConfigurations.push(frontendIp);
          return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 14, 9, function __$addFrontendIp__14() { _(); }, true)); }, true)); }, true)); }); },


  updateFrontendIp: function updateFrontendIp__15(resourceGroup, appGatewayName, frontendIpName, options, _) { var self, appGateway, frontendIp, index, __this = this; var __frame = { name: "updateFrontendIp__15", line: 440 }; return __func(_, this, arguments, updateFrontendIp__15, 4, __frame, function __$updateFrontendIp__15() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        frontendIp = utils.findFirstCaseIgnore(appGateway.frontendIPConfigurations, { name: frontendIpName });
        if (!frontendIp) {
          return _(new Error(util.format($("A frontend ip with name \"%s\" not found in the application gateway \"%s\""), frontendIpName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.frontendIPConfigurations, { name: frontendIpName });
        return self._parseFrontendIp(resourceGroup, appGatewayName, frontendIpName, options, __cb(_, __frame, 13, 22, function ___(__0, __2) { frontendIp = __2;
          appGateway.frontendIPConfigurations[index] = frontendIp;
          return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 15, 9, function __$updateFrontendIp__15() { _(); }, true)); }, true)); }, true)); }); },


  listFrontendIps: function listFrontendIps__16(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "listFrontendIps__16", line: 458 }; return __func(_, this, arguments, listFrontendIps__16, 3, __frame, function __$listFrontendIps__16() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        self.interaction.formatOutput(appGateway.frontendIPConfigurations, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway frontend ip configurations found")); }
           else {
            self._listAppGatewayFrontendIpConfigs(appGateway); } ; }); _(); }, true)); }); },




  showFrontendIp: function showFrontendIp__17(resourceGroup, appGatewayName, frontendIpName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showFrontendIp__17", line: 474 }; return __func(_, this, arguments, showFrontendIp__17, 4, __frame, function __$showFrontendIp__17() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.frontendIPConfigurations, { name: frontendIpName });
        if ((index === -1)) {
          return _(new Error(util.format($("A frontend ip with name \"%s\" not found in an application gateway \"%s\""), frontendIpName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.frontendIPConfigurations[index], generatorUtils.traverse); _(); }, true)); }); },


  removeFrontendIp: function removeFrontendIp__18(resourceGroup, appGatewayName, frontendIpName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeFrontendIp__18", line: 489 }; return __func(_, this, arguments, removeFrontendIp__18, 4, __frame, function __$removeFrontendIp__18() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.frontendIPConfigurations, { name: frontendIpName });
        if ((index === -1)) {
          return _(new Error(util.format($("A frontend ip with name \"%s\" not found for an application gateway \"%s\""), frontendIpName, appGatewayName))); } ; return (function __$removeFrontendIp__18(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete a frontend ip \"%s\"? [y/n] "), frontendIpName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -488, 17, function ___(__0, __3) { return (function __$removeFrontendIp__18(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeFrontendIp__18() {


            appGateway.frontendIPConfigurations.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 16, 9, function __$removeFrontendIp__18() { _(); }, true)); }); }, true)); }, true)); }); },


  addFrontendPort: function addFrontendPort__19(resourceGroup, appGatewayName, frontendPortName, options, _) { var self, appGateway, frontendPort, __this = this; var __frame = { name: "addFrontendPort__19", line: 508 }; return __func(_, this, arguments, addFrontendPort__19, 4, __frame, function __$addFrontendPort__19() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        frontendPort = utils.findFirstCaseIgnore(appGateway.frontendPorts, { name: frontendPortName });
        if (frontendPort) {
          return _(new Error(util.format($("A frontend port with name \"%s\" already exists for an application gateway \"%s\""), frontendPortName, appGatewayName))); } ;

        if (((options.port < constants.appGateway.settings.port[0]) || (options.port > constants.appGateway.settings.port[1]))) {
          return _(new Error(util.format($("A frontend port value must be in range [%s]"), constants.appGateway.settings.port))); } ;

        frontendPort = {
          name: frontendPortName,
          port: parseInt(options.port) };


        self.output.warn("Application gateway add new frontend port command is a long-running process. It may take up to 15-20 minutes to complete.");
        appGateway.frontendPorts.push(frontendPort);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 21, 9, function __$addFrontendPort__19() { _(); }, true)); }, true)); }); },


  updateFrontendPort: function updateFrontendPort__20(resourceGroup, appGatewayName, frontendPortName, options, _) { var self, appGateway, frontendPort, __this = this; var __frame = { name: "updateFrontendPort__20", line: 532 }; return __func(_, this, arguments, updateFrontendPort__20, 4, __frame, function __$updateFrontendPort__20() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        frontendPort = utils.findFirstCaseIgnore(appGateway.frontendPorts, { name: frontendPortName });
        if (!frontendPort) {
          return _(new Error(util.format($("A frontend port with name \"%s\" not found in the application gateway \"%s\""), frontendPortName, appGatewayName))); } ;


        if (((options.port < constants.appGateway.settings.port[0]) || (options.port > constants.appGateway.settings.port[1]))) {
          return _(new Error(util.format($("A frontend port value must be in range [%s]"), constants.appGateway.settings.port))); } ;


        frontendPort.port = parseInt(options.port);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 17, 9, function __$updateFrontendPort__20() { _(); }, true)); }, true)); }); },


  listFrontendPorts: function listFrontendPorts__21(resourceGroup, appGatewayName, options, _) { var self, appGateway, items, __this = this; var __frame = { name: "listFrontendPorts__21", line: 552 }; return __func(_, this, arguments, listFrontendPorts__21, 3, __frame, function __$listFrontendPorts__21() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;

        items = appGateway.frontendPorts;
        self.interaction.formatOutput(items, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway frontend ports found")); }
           else {
            self._listAppGatewayFrontendPorts(appGateway); } ; }); _(); }, true)); }); },




  showFrontendPort: function showFrontendPort__22(resourceGroup, appGatewayName, frontendPortName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showFrontendPort__22", line: 568 }; return __func(_, this, arguments, showFrontendPort__22, 4, __frame, function __$showFrontendPort__22() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.frontendPorts, { name: frontendPortName });
        if ((index === -1)) {
          return _(new Error(util.format($("A frontend port with name \"%s\" not found in an application gateway \"%s\""), frontendPortName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.frontendPorts[index], generatorUtils.traverse); _(); }, true)); }); },


  removeFrontendPort: function removeFrontendPort__23(resourceGroup, appGatewayName, frontendPortName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeFrontendPort__23", line: 583 }; return __func(_, this, arguments, removeFrontendPort__23, 4, __frame, function __$removeFrontendPort__23() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.frontendPorts, { name: frontendPortName });
        if ((index === -1)) {
          return _(new Error(util.format($("Frontend port with name \"%s\" not found for an application gateway \"%s\""), frontendPortName, appGatewayName))); } ; return (function __$removeFrontendPort__23(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete a frontend port \"%s\"? [y/n] "), frontendPortName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -582, 17, function ___(__0, __3) { return (function __$removeFrontendPort__23(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeFrontendPort__23() {



            self.output.warn("Application gateway remove frontend port command is a long-running process. It may take up to 15-20 minutes to complete.");
            appGateway.frontendPorts.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 18, 9, function __$removeFrontendPort__23() { _(); }, true)); }); }, true)); }, true)); }); },


  addBackendAddressPool: function addBackendAddressPool__24(resourceGroup, appGatewayName, poolName, options, _) { var self, dnsServers, appGateway, pool, addressPool, __this = this; var __frame = { name: "addBackendAddressPool__24", line: 604 }; return __func(_, this, arguments, addBackendAddressPool__24, 4, __frame, function __$addBackendAddressPool__24() { self = __this;

      dnsServers = self._parseDnsServers(options);
      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        pool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: poolName }); return (function __$addBackendAddressPool__24(__then) {
          if (pool) {
            return _(new Error(util.format($("A backend address pool with name \"%s\" already exists in application gateway \"%s\""), poolName, appGatewayName))); } else {

            addressPool = {
              name: poolName,
              backendAddresses: dnsServers };

            appGateway.backendAddressPools.push(addressPool);

            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 18, 11, __then, true)); } ; })(_); }, true)); }); },



  updateBackendAddressPool: function updateBackendAddressPool__25(resourceGroup, appGatewayName, poolName, options, _) { var self, dnsServers, appGateway, pool, index, __this = this; var __frame = { name: "updateBackendAddressPool__25", line: 626 }; return __func(_, this, arguments, updateBackendAddressPool__25, 4, __frame, function __$updateBackendAddressPool__25() { self = __this;

      dnsServers = self._parseDnsServers(options);
      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        pool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: poolName });
        if (!pool) {
          return _(new Error(util.format($("A backend address pool with name \"%s\" not found in the application gateway \"%s\""), poolName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendAddressPools, { name: poolName });
        pool.backendAddresses = dnsServers;
        appGateway.backendAddressPools[index] = pool;
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 16, 9, function __$updateBackendAddressPool__25() { _(); }, true)); }, true)); }); },


  listBackendAddressPools: function listBackendAddressPools__26(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "listBackendAddressPools__26", line: 645 }; return __func(_, this, arguments, listBackendAddressPools__26, 3, __frame, function __$listBackendAddressPools__26() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        self.interaction.formatOutput(appGateway.backendAddressPools, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway backend address pools found")); }
           else {
            self._listAppGatewayAddressPools(appGateway); } ; }); _(); }, true)); }); },




  showBackendAddressPool: function showBackendAddressPool__27(resourceGroup, appGatewayName, poolName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showBackendAddressPool__27", line: 661 }; return __func(_, this, arguments, showBackendAddressPool__27, 4, __frame, function __$showBackendAddressPool__27() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendAddressPools, { name: poolName });
        if ((index === -1)) {
          return _(new Error(util.format($("A backend address pool with name \"%s\" not found in an application gateway \"%s\""), poolName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.backendAddressPools[index], generatorUtils.traverse); _(); }, true)); }); },


  removeBackendAddressPool: function removeBackendAddressPool__28(resourceGroup, appGatewayName, poolName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeBackendAddressPool__28", line: 676 }; return __func(_, this, arguments, removeBackendAddressPool__28, 4, __frame, function __$removeBackendAddressPool__28() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendAddressPools, { name: poolName }); return (function __$removeBackendAddressPool__28(__then) {
          if ((index !== -1)) { return (function __$removeBackendAddressPool__28(_) {
              var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete a backend address pool \"%s\"? [y/n] "), poolName), __cb(_, __frame, 9, 46, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -675, 17, function ___(__0, __3) { return (function __$removeBackendAddressPool__28(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeBackendAddressPool__28() {


                appGateway.backendAddressPools.splice(index, 1);
                return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 13, 11, __then, true)); }); }, true)); } else {

            return _(new Error(util.format($("A backend address pool with name \"%s\" not found for an application gateway \"%s\""), poolName, appGatewayName))); } ; })(_); }, true)); }); },



  addHttpSettings: function addHttpSettings__29(resourceGroup, appGatewayName, httpSettingsName, options, _) { var self, appGateway, httpSettings, settings, __this = this; var __frame = { name: "addHttpSettings__29", line: 695 }; return __func(_, this, arguments, addHttpSettings__29, 4, __frame, function __$addHttpSettings__29() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        httpSettings = { name: httpSettingsName };
        httpSettings = self._parseHttpSettings(resourceGroup, appGatewayName, httpSettings, options, true);
        settings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: httpSettingsName }); return (function __$addHttpSettings__29(__then) {
          if (settings) {
            return _(new Error(util.format($("A http settings with name \"%s\" already exists for an application gateway \"%s\""), httpSettingsName, appGatewayName))); } else {

            appGateway.backendHttpSettingsCollection.push(httpSettings);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 14, 11, __then, true)); } ; })(_); }, true)); }); },



  updateHttpSettings: function updateHttpSettings__30(resourceGroup, appGatewayName, httpSettingsName, options, _) { var self, appGateway, httpSettings, index, __this = this; var __frame = { name: "updateHttpSettings__30", line: 713 }; return __func(_, this, arguments, updateHttpSettings__30, 4, __frame, function __$updateHttpSettings__30() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        httpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: httpSettingsName });
        if (!httpSettings) {
          return _(new Error(util.format($("A http settings with name \"%s\" not found in the application gateway \"%s\""), httpSettingsName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendHttpSettingsCollection, { name: httpSettingsName });
        httpSettings = self._parseHttpSettings(resourceGroup, appGatewayName, httpSettings, options, false);
        appGateway.backendHttpSettingsCollection[index] = httpSettings;
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 15, 9, function __$updateHttpSettings__30() { _(); }, true)); }, true)); }); },


  listHttpSettings: function listHttpSettings__31(resourceGroup, appGatewayName, options, _) { var self, appGateway, items, __this = this; var __frame = { name: "listHttpSettings__31", line: 731 }; return __func(_, this, arguments, listHttpSettings__31, 3, __frame, function __$listHttpSettings__31() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;

        items = appGateway.backendHttpSettingsCollection;
        self.interaction.formatOutput(items, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway http settings found")); }
           else {
            self._listAppGatewayHttpSettings(appGateway); } ; }); _(); }, true)); }); },




  showHttpSettings: function showHttpSettings__32(resourceGroup, appGatewayName, httpSettingsName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showHttpSettings__32", line: 747 }; return __func(_, this, arguments, showHttpSettings__32, 4, __frame, function __$showHttpSettings__32() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendHttpSettingsCollection, { name: httpSettingsName });
        if ((index === -1)) {
          return _(new Error(util.format($("A http settings with name \"%s\" not found in an application gateway \"%s\""), httpSettingsName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.backendHttpSettingsCollection[index], generatorUtils.traverse); _(); }, true)); }); },


  removeHttpSettings: function removeHttpSettings__33(resourceGroup, appGatewayName, httpSettingsName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeHttpSettings__33", line: 762 }; return __func(_, this, arguments, removeHttpSettings__33, 4, __frame, function __$removeHttpSettings__33() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.backendHttpSettingsCollection, { name: httpSettingsName }); return (function __$removeHttpSettings__33(__then) {
          if ((index !== -1)) { return (function __$removeHttpSettings__33(_) {
              var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete an http settings \"%s\"? [y/n] "), httpSettingsName), __cb(_, __frame, 9, 46, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -761, 17, function ___(__0, __3) { return (function __$removeHttpSettings__33(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeHttpSettings__33() {


                appGateway.backendHttpSettingsCollection.splice(index, 1);
                return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 13, 11, __then, true)); }); }, true)); } else {

            return _(new Error(util.format($("An http settings with name \"%s\" not found for an application gateway \"%s\""), httpSettingsName, appGatewayName))); } ; })(_); }, true)); }); },



  addHttpListener: function addHttpListener__34(resourceGroup, appGatewayName, httpListenerName, options, _) { var self, appGateway, httpListener, frontendIp, frontendPort, protocol, sslCert, __this = this; var __frame = { name: "addHttpListener__34", line: 781 }; return __func(_, this, arguments, addHttpListener__34, 4, __frame, function __$addHttpListener__34() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if ((!appGateway.httpListeners || !appGateway.httpListeners.length)) {
          appGateway.httpListeners = []; } ;


        if (utils.findFirstCaseIgnore(appGateway.httpListeners, { name: httpListenerName })) {
          return _(new Error(util.format($("An http listener with name \"%s\" already exists for an application gateway \"%s\""), httpListenerName, appGatewayName))); } ;


        httpListener = {
          name: httpListenerName,
          protocol: constants.appGateway.settings.protocol[0] };


        if (options.frontendIpName) {
          frontendIp = utils.findFirstCaseIgnore(appGateway.frontendIPConfigurations, { name: options.frontendIpName });
          if (!frontendIp) {
            return _(new Error(util.format($("Frontend ip with name \"%s\" not found for an application gateway \"%s\""), options.frontendIpName, appGatewayName))); } ;

          httpListener.frontendIPConfiguration = frontendIp; } ;


        if (options.frontendPortName) {
          frontendPort = utils.findFirstCaseIgnore(appGateway.frontendPorts, { name: options.frontendPortName });
          if (!frontendPort) {
            return _(new Error(util.format($("Frontend port with name \"%s\" not found for an application gateway \"%s\""), options.frontendPortName, appGatewayName))); } ;

          httpListener.frontendPort = frontendPort; } ;


        if (options.protocol) {
          protocol = options.protocol.toLowerCase();
          if (((protocol === "https") && !options.sslCert)) {
            return _(new Error($("--ssl-cert parameter is required, when \"--protocol Https\" parameter is specified"))); } ;

          if (((protocol !== "http") && (protocol != "https"))) {
            return _(new Error(util.format($("\"%s\" protocol is not valid. Valid values are [%s]"), constants.appGateway.httpListener.protocol))); } ;

          httpListener.protocol = utils.capitalizeFirstLetter(protocol); } ;


        if (options.sslCert) {
          sslCert = utils.findFirstCaseIgnore(appGateway.sslCertificates, { name: options.sslCert });
          if (!sslCert) {
            return _(new Error(util.format($("SSL certificate with name \"%s\" not found for an application gateway \"%s\""), options.sslCert, appGatewayName))); } ;

          httpListener.sslCertificate = sslCert; } ;


        self.output.warn("Application gateway add new http listener command is a long-running process. It may take up to 15-20 minutes to complete.");
        appGateway.httpListeners.push(httpListener);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 57, 9, function __$addHttpListener__34() { _(); }, true)); }, true)); }); },


  setHttpListener: function setHttpListener__35(resourceGroup, appGatewayName, httpListenerName, options, _) { var self, appGateway, httpListener, protocol, sslCert, __this = this; var __frame = { name: "setHttpListener__35", line: 841 }; return __func(_, this, arguments, setHttpListener__35, 4, __frame, function __$setHttpListener__35() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        httpListener = utils.findFirstCaseIgnore(appGateway.httpListeners, { name: httpListenerName });
        if (!httpListener) {
          return _(new Error(util.format($("HTTP listener \"%s\" not found in application gateway \"%s\""), httpListenerName, appGatewayName))); } ;


        if (options.protocol) {
          protocol = options.protocol.toLowerCase();
          if (((protocol === "https") && !options.sslCert)) {
            return _(new Error($("--ssl-cert parameter is required, when \"--protocol Https\" parameter is specified"))); } ;

          if (((protocol !== "http") && (protocol != "https"))) {
            return _(new Error(util.format($("\"%s\" protocol is not valid. Valid values are [%s]"), protocol, constants.appGateway.httpListener.protocol))); } ;

          httpListener.protocol = utils.capitalizeFirstLetter(protocol); } ;


        if (options.sslCert) {
          sslCert = utils.findFirstCaseIgnore(appGateway.sslCertificates, { name: options.sslCert });
          if (!sslCert) {
            return _(new Error(util.format($("SSL certificate with name \"%s\" not found for an application gateway \"%s\""), options.sslCert, appGatewayName))); } ;

          httpListener.sslCertificate = sslCert; } ;


        self.output.warn("Application gateway update http listener command is a long-running process. It may take up to 15-20 minutes to complete.");
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 32, 9, function __$setHttpListener__35() { _(); }, true)); }, true)); }); },


  listHttpListeners: function listHttpListeners__36(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "listHttpListeners__36", line: 876 }; return __func(_, this, arguments, listHttpListeners__36, 3, __frame, function __$listHttpListeners__36() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;

        self.interaction.formatOutput(appGateway.httpListeners, function(listeners) {
          if ((listeners.length === 0)) {
            self.output.warn(util.format($("No HTTP listeners found in application gateway \"%s\""), appGateway.name)); }
           else {
            self._listAppGatewayHttpListeners(appGateway); } ; }); _(); }, true)); }); },




  showHttpListener: function showHttpListener__37(resourceGroup, appGatewayName, listenerName, options, _) { var self, appGateway, listener, __this = this; var __frame = { name: "showHttpListener__37", line: 892 }; return __func(_, this, arguments, showHttpListener__37, 4, __frame, function __$showHttpListener__37() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        listener = utils.findFirstCaseIgnore(appGateway.httpListeners, { name: listenerName });
        if (!listener) {
          return _(new Error(util.format($("An HTTP listener with name \"%s\" was not found in application gateway \"%s\""), listenerName, appGatewayName))); } ;

        self._showAppGatewayHttpListener(listener); _(); }, true)); }); },


  removeHttpListener: function removeHttpListener__38(resourceGroup, appGatewayName, httpListenerName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeHttpListener__38", line: 907 }; return __func(_, this, arguments, removeHttpListener__38, 4, __frame, function __$removeHttpListener__38() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.httpListeners, { name: httpListenerName });
        if ((index === -1)) {
          return _(new Error(util.format($("Http listener with name \"%s\" not found for an application gateway \"%s\""), httpListenerName, appGatewayName))); } ; return (function __$removeHttpListener__38(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete http listener \"%s\"? [y/n] "), httpListenerName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -906, 17, function ___(__0, __3) { return (function __$removeHttpListener__38(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeHttpListener__38() {



            self.output.warn("Application gateway remove http listener command is a long-running process. It may take up to 15-20 minutes to complete.");
            appGateway.httpListeners.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 18, 9, function __$removeHttpListener__38() { _(); }, true)); }); }, true)); }, true)); }); },


  addRequestRoutingRule: function addRequestRoutingRule__39(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, backendHttpSettings, httpListener, backendAddressPool, rule, __this = this; var __frame = { name: "addRequestRoutingRule__39", line: 928 }; return __func(_, this, arguments, addRequestRoutingRule__39, 4, __frame, function __$addRequestRoutingRule__39() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        if (utils.findFirstCaseIgnore(appGateway.requestRoutingRules, { name: ruleName })) {
          return _(new Error(util.format($("A request routing rule with name \"%s\" already exists in application gateway \"%s\""), ruleName, appGatewayName))); } ;


        backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
        if (!backendHttpSettings) {
          return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;


        httpListener = utils.findFirstCaseIgnore(appGateway.httpListeners, { name: options.httpListenerName });
        if (!httpListener) {
          return _(new Error(util.format($("Http listener with name \"%s\" not found for an application gateway \"%s\""), options.httpListenerName, appGatewayName))); } ;


        backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
        if (!backendAddressPool) {
          return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;


        rule = {
          name: ruleName,
          type: constants.appGateway.routingRule.type[0],
          backendHttpSettings: backendHttpSettings,
          httpListener: httpListener,
          backendAddressPool: backendAddressPool };


        if (options.type) {
          utils.verifyParamExistsInCollection(constants.appGateway.routingRule.type, options.type, "--type");
          rule.type = options.type; } ;


        appGateway.requestRoutingRules.push(rule);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 40, 9, function __$addRequestRoutingRule__39() { _(); }, true)); }, true)); }); },


  updateRequestRoutingRule: function updateRequestRoutingRule__40(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, rule, index, backendHttpSettings, httpListener, backendAddressPool, __this = this; var __frame = { name: "updateRequestRoutingRule__40", line: 971 }; return __func(_, this, arguments, updateRequestRoutingRule__40, 4, __frame, function __$updateRequestRoutingRule__40() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        rule = utils.findFirstCaseIgnore(appGateway.requestRoutingRules, { name: ruleName });
        if (!rule) {
          return _(new Error(util.format($("A request routing rule with name \"%s\" not found in application gateway \"%s\""), ruleName, appGatewayName))); } ;

        index = utils.indexOfCaseIgnore(appGateway.requestRoutingRules, { name: ruleName });

        if (options.httpSettingsName) {
          backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
          if (!backendHttpSettings) {
            return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;

          rule.backendHttpSettings = backendHttpSettings; } ;


        if (options.httpListenerName) {
          httpListener = utils.findFirstCaseIgnore(appGateway.httpListeners, { name: options.httpListenerName });
          if (!httpListener) {
            return _(new Error(util.format($("Http listener with name \"%s\" not found for an application gateway \"%s\""), options.httpListenerName, appGatewayName))); } ;

          rule.httpListener = httpListener; } ;


        if (options.addressPoolName) {
          backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
          if (!backendAddressPool) {
            return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;

          rule.backendAddressPool = backendAddressPool; } ;


        if (options.type) {
          utils.verifyParamExistsInCollection(constants.appGateway.routingRule.type, options.type, "--type");
          rule.type = options.type; } ;


        appGateway.requestRoutingRules[index] = rule;
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 43, 9, function __$updateRequestRoutingRule__40() { _(); }, true)); }, true)); }); },


  listRequestRoutingRules: function listRequestRoutingRules__41(resourceGroup, appGatewayName, options, _) { var self, appGateway, items, __this = this; var __frame = { name: "listRequestRoutingRules__41", line: 1017 }; return __func(_, this, arguments, listRequestRoutingRules__41, 3, __frame, function __$listRequestRoutingRules__41() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;

        items = appGateway.requestRoutingRules;
        self.interaction.formatOutput(items, function(data) {
          if ((data.length === 0)) {
            cli.output.warn($("No application gateway http settings found")); }
           else {
            self._listAppGatewayRoutingRules(appGateway); } ; }); _(); }, true)); }); },




  showRequestRoutingRule: function showRequestRoutingRule__42(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showRequestRoutingRule__42", line: 1033 }; return __func(_, this, arguments, showRequestRoutingRule__42, 4, __frame, function __$showRequestRoutingRule__42() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.requestRoutingRules, { name: ruleName });
        if ((index === -1)) {
          return _(new Error(util.format($("A request routing rule with name \"%s\" not found in an application gateway \"%s\""), ruleName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.requestRoutingRules[index], generatorUtils.traverse); _(); }, true)); }); },


  removeRequestRoutingRule: function removeRequestRoutingRule__43(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeRequestRoutingRule__43", line: 1048 }; return __func(_, this, arguments, removeRequestRoutingRule__43, 4, __frame, function __$removeRequestRoutingRule__43() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.requestRoutingRules, { name: ruleName });
        if ((index === -1)) {
          return _(new Error(util.format($("An request routing rule with name \"%s\" not found in application gateway \"%s\""), ruleName, appGatewayName))); } ; return (function __$removeRequestRoutingRule__43(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete request routing rule \"%s\"? [y/n] "), ruleName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1047, 17, function ___(__0, __3) { return (function __$removeRequestRoutingRule__43(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeRequestRoutingRule__43() {


            appGateway.requestRoutingRules.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 16, 9, function __$removeRequestRoutingRule__43() { _(); }, true)); }); }, true)); }, true)); }); },


  addProbe: function addProbe__44(resourceGroup, appGatewayName, probeName, options, _) { var self, appGateway, probe, __this = this; var __frame = { name: "addProbe__44", line: 1067 }; return __func(_, this, arguments, addProbe__44, 4, __frame, function __$addProbe__44() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        if (utils.findFirstCaseIgnore(appGateway.probes, { name: probeName })) {
          return _(new Error(util.format($("A probe with name \"%s\" already exists in application gateway \"%s\""), probeName, appGatewayName))); } ;


        probe = { name: probeName };
        probe = self._parseProbe(resourceGroup, appGatewayName, probe, options, true);
        appGateway.probes.push(probe);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 14, 9, function __$addProbe__44() { _(); }, true)); }, true)); }); },


  updateProbe: function updateProbe__45(resourceGroup, appGatewayName, probeName, options, _) { var self, appGateway, probe, index, __this = this; var __frame = { name: "updateProbe__45", line: 1084 }; return __func(_, this, arguments, updateProbe__45, 4, __frame, function __$updateProbe__45() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        probe = utils.findFirstCaseIgnore(appGateway.probes, { name: probeName });
        if (!probe) {
          return _(new Error(util.format($("A probe with name \"%s\" not found in the application gateway \"%s\""), probeName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.probes, { name: probeName });
        probe = self._parseProbe(resourceGroup, appGatewayName, probe, options, false);
        appGateway.probes[index] = probe;
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 15, 9, function __$updateProbe__45() { _(); }, true)); }, true)); }); },


  listProbes: function listProbes__46(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "listProbes__46", line: 1102 }; return __func(_, this, arguments, listProbes__46, 3, __frame, function __$listProbes__46() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;

        self.interaction.formatOutput(appGateway.probes, function(probes) {
          if ((probes.length === 0)) {
            cli.output.warn($("No application gateway probes found")); }
           else {
            self._listAppGatewayProbes(appGateway); } ; }); _(); }, true)); }); },




  showProbe: function showProbe__47(resourceGroup, appGatewayName, probeName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "showProbe__47", line: 1117 }; return __func(_, this, arguments, showProbe__47, 4, __frame, function __$showProbe__47() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found in resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(appGateway.probes, { name: probeName });
        if ((index === -1)) {
          return _(new Error(util.format($("A probe with name \"%s\" not found in an application gateway \"%s\""), probeName, appGatewayName))); } ;


        self.interaction.formatOutput(appGateway.probes[index], generatorUtils.traverse); _(); }, true)); }); },


  removeProbe: function removeProbe__48(resourceGroup, appGatewayName, probeName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeProbe__48", line: 1132 }; return __func(_, this, arguments, removeProbe__48, 4, __frame, function __$removeProbe__48() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.probes, { name: probeName });
        if ((index === -1)) {
          return _(new Error(util.format($("A probe with name \"%s\" not found in application gateway \"%s\""), probeName, appGatewayName))); } ; return (function __$removeProbe__48(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete probe \"%s\"? [y/n] "), probeName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1131, 17, function ___(__0, __3) { return (function __$removeProbe__48(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeProbe__48() {


            appGateway.probes.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 16, 9, function __$removeProbe__48() { _(); }, true)); }); }, true)); }, true)); }); },


  addUrlPathMap: function addUrlPathMap__49(resourceGroup, appGatewayName, urlPathMapName, options, _) { var self, appGateway, backendHttpSettings, backendAddressPool, urlPathMap, __this = this; var __frame = { name: "addUrlPathMap__49", line: 1151 }; return __func(_, this, arguments, addUrlPathMap__49, 4, __frame, function __$addUrlPathMap__49() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        if (utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName })) {
          return _(new Error(util.format($("An url path map with name \"%s\" already exists in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ;


        backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
        if (!backendHttpSettings) {
          return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;


        backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
        if (!backendAddressPool) {
          return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;


        urlPathMap = {
          name: urlPathMapName,
          defaultBackendAddressPool: {
            id: backendAddressPool.id },

          defaultBackendHttpSettings: {
            id: backendHttpSettings.id },

          pathRules: [{
            name: options.ruleName,
            paths: [options.path,],
            backendAddressPool: { id: backendAddressPool.id },
            backendHttpSettings: { id: backendHttpSettings.id } },] };



        appGateway.urlPathMaps.push(urlPathMap);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 38, 9, function __$addUrlPathMap__49() { _(); }, true)); }, true)); }); },


  setUrlPathMap: function setUrlPathMap__50(resourceGroup, appGatewayName, urlPathMapName, options, _) { var self, appGateway, urlPathMap, backendHttpSettings, backendAddressPool, __this = this; var __frame = { name: "setUrlPathMap__50", line: 1192 }; return __func(_, this, arguments, setUrlPathMap__50, 4, __frame, function __$setUrlPathMap__50() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ;


        if (options.httpSettingsName) {
          backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
          if (!backendHttpSettings) {
            return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;

          urlPathMap.defaultBackendHttpSettings = { id: backendHttpSettings.id }; } ;


        if (options.addressPoolName) {
          backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
          if (!backendAddressPool) {
            return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;

          urlPathMap.defaultBackendAddressPool = { id: backendAddressPool.id }; } ;


        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 28, 9, function __$setUrlPathMap__50() { _(); }, true)); }, true)); }); },


  listUrlPathMaps: function listUrlPathMaps__51(resourceGroup, appGatewayName, options, _) { var self, appGateway, __this = this; var __frame = { name: "listUrlPathMaps__51", line: 1223 }; return __func(_, this, arguments, listUrlPathMaps__51, 3, __frame, function __$listUrlPathMaps__51() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        self._listAppGatewayUrlPathMaps(appGateway); _(); }, true)); }); },


  showUrlPathMap: function showUrlPathMap__52(resourceGroup, appGatewayName, urlPathMapName, options, _) { var self, appGateway, urlPathMap, __this = this; var __frame = { name: "showUrlPathMap__52", line: 1234 }; return __func(_, this, arguments, showUrlPathMap__52, 4, __frame, function __$showUrlPathMap__52() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ;

        self._showAppGatewayUrlPathMap(urlPathMap); _(); }, true)); }); },


  removeUrlPathMap: function removeUrlPathMap__53(resourceGroup, appGatewayName, urlPathMapName, options, _) { var self, appGateway, index, __this = this; var __frame = { name: "removeUrlPathMap__53", line: 1249 }; return __func(_, this, arguments, removeUrlPathMap__53, 4, __frame, function __$removeUrlPathMap__53() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName });
        if ((index === -1)) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ; return (function __$removeUrlPathMap__53(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete url path map \"%s\"? [y/n] "), urlPathMapName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1248, 17, function ___(__0, __3) { return (function __$removeUrlPathMap__53(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeUrlPathMap__53() {


            appGateway.urlPathMaps.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 16, 9, function __$removeUrlPathMap__53() { _(); }, true)); }); }, true)); }, true)); }); },


  addMapRule: function addMapRule__54(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, urlPathMap, backendHttpSettings, backendAddressPool, rule, __this = this; var __frame = { name: "addMapRule__54", line: 1268 }; return __func(_, this, arguments, addMapRule__54, 4, __frame, function __$addMapRule__54() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: options.urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), options.urlPathMapName, appGatewayName))); } ;


        if (utils.findFirstCaseIgnore(urlPathMap.pathRules, { name: ruleName })) {
          return _(new Error(util.format($("A rule with name \"%s\" already exists in url path map \"%s\""), ruleName, options.urlPathMapName))); } ;


        backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
        if (!backendHttpSettings) {
          return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;


        backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
        if (!backendAddressPool) {
          return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;


        rule = {
          name: ruleName,
          paths: [options.path,],
          backendAddressPool: { id: backendAddressPool.id },
          backendHttpSettings: { id: backendHttpSettings.id } };

        urlPathMap.pathRules.push(rule);
        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 33, 9, function __$addMapRule__54() { _(); }, true)); }, true)); }); },


  setMapRule: function setMapRule__55(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, urlPathMap, rule, backendHttpSettings, backendAddressPool, __this = this; var __frame = { name: "setMapRule__55", line: 1304 }; return __func(_, this, arguments, setMapRule__55, 4, __frame, function __$setMapRule__55() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: options.urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), options.urlPathMapName, appGatewayName))); } ;


        rule = utils.findFirstCaseIgnore(urlPathMap.pathRules, { name: ruleName });
        if (!rule) {
          return _(new Error(util.format($("A rule with name \"%s\" not found in url path map \"%s\""), ruleName, options.urlPathMapName))); } ;


        if (options.httpSettingsName) {
          backendHttpSettings = utils.findFirstCaseIgnore(appGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
          if (!backendHttpSettings) {
            return _(new Error(util.format($("A backend http settings with name \"%s\" not found in application gateway \"%s\""), options.httpSettingsName, appGatewayName))); } ;

          rule.backendHttpSettings = { id: backendHttpSettings.id }; } ;


        if (options.addressPoolName) {
          backendAddressPool = utils.findFirstCaseIgnore(appGateway.backendAddressPools, { name: options.addressPoolName });
          if (!backendAddressPool) {
            return _(new Error(util.format($("Address pool with name \"%s\" not found for an application gateway \"%s\""), options.addressPoolName, appGatewayName))); } ;

          rule.backendAddressPool = { id: backendAddressPool.id }; } ;


        return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 33, 9, function __$setMapRule__55() { _(); }, true)); }, true)); }); },


  listUrlPathMapRules: function listUrlPathMapRules__56(resourceGroup, appGatewayName, urlPathMapName, options, _) { var self, appGateway, urlPathMap, __this = this; var __frame = { name: "listUrlPathMapRules__56", line: 1340 }; return __func(_, this, arguments, listUrlPathMapRules__56, 4, __frame, function __$listUrlPathMapRules__56() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ;


        self._listAppGatewayUrlPathMapRules(urlPathMap.pathRules); _(); }, true)); }); },


  showUrlPathMapRule: function showUrlPathMapRule__57(resourceGroup, appGatewayName, urlPathMapName, ruleName, options, _) { var self, appGateway, urlPathMap, rule, __this = this; var __frame = { name: "showUrlPathMapRule__57", line: 1356 }; return __func(_, this, arguments, showUrlPathMapRule__57, 5, __frame, function __$showUrlPathMapRule__57() { self = __this;


      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 3, 26, function ___(__0, __1) { appGateway = __1;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), urlPathMapName, appGatewayName))); } ;


        rule = utils.findFirstCaseIgnore(urlPathMap.pathRules, { name: ruleName });
        if (!rule) {
          return _(new Error(util.format($("An url path map with name \"%s\" doesn't contain rule with name \"%s\""), urlPathMapName, ruleName))); } ;

        self._showAppGatewayUrlPathMapRule(rule); _(); }, true)); }); },


  removeMapRule: function removeMapRule__58(resourceGroup, appGatewayName, ruleName, options, _) { var self, appGateway, urlPathMap, index, __this = this; var __frame = { name: "removeMapRule__58", line: 1376 }; return __func(_, this, arguments, removeMapRule__58, 4, __frame, function __$removeMapRule__58() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 26, function ___(__0, __2) { appGateway = __2;
        if (!appGateway) {
          return _(new Error(util.format($("Application gateway \"%s\" not found"), appGatewayName))); } ;


        urlPathMap = utils.findFirstCaseIgnore(appGateway.urlPathMaps, { name: options.urlPathMapName });
        if (!urlPathMap) {
          return _(new Error(util.format($("An url path map with name \"%s\" not found in application gateway \"%s\""), options.urlPathMapName, appGatewayName))); } ;


        index = utils.indexOfCaseIgnore(urlPathMap.pathRules, { name: ruleName });
        if ((index === -1)) {
          return _(new Error(util.format($("A rule with name \"%s\" not found in url path map \"%s\""), ruleName, options.urlPathMapName))); } ; return (function __$removeMapRule__58(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete url path map rule \"%s\"? [y/n] "), ruleName), __cb(_, __frame, 17, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1375, 17, function ___(__0, __3) { return (function __$removeMapRule__58(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeMapRule__58() {


            urlPathMap.pathRules.splice(index, 1);
            return self._setAppGateway(resourceGroup, appGatewayName, appGateway, options, __cb(_, __frame, 21, 9, function __$removeMapRule__58() { _(); }, true)); }); }, true)); }, true)); }); },


  addSslPolicy: function addSslPolicy__59(resourceGroup, appGatewayName, options, _) { var self, result, __this = this; var __frame = { name: "addSslPolicy__59", line: 1400 }; return __func(_, this, arguments, addSslPolicy__59, 3, __frame, function __$addSslPolicy__59() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if (!result.sslPolicy) {
          result.sslPolicy = { }; } ;


        if (options.disableSslProtocols) {
          result.sslPolicy.disabledSslProtocols = options.disableSslProtocols.split(","); } ;


        generatorUtils.removeEmptyObjects(result);
        progress = self.interaction.progress(util.format($("Creating application gateway ssl policy in \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$addSslPolicy__59() {

              return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 18, 64, function ___(__0, __2) { result = __2; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$addSslPolicy__59() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$addSslPolicy__59() {


            self.interaction.formatOutput(result.sslPolicy, generatorUtils.traverse); _(); }); }); }, true)); }); },


  removeSslPolicy: function removeSslPolicy__60(resourceGroup, appGatewayName, options, _) { var self, result, __this = this; var __frame = { name: "removeSslPolicy__60", line: 1426 }; return __func(_, this, arguments, removeSslPolicy__60, 3, __frame, function __$removeSslPolicy__60() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __2) { result = __2;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ; return (function __$removeSslPolicy__60(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete application gateway ssl policy from \"%s\"? [y/n] "), appGatewayName), __cb(_, __frame, 7, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1425, 17, function ___(__0, __3) { return (function __$removeSslPolicy__60(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeSslPolicy__60() {



            delete result.sslPolicy;
            progress = self.interaction.progress("Deleting application gateway ssl policy"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$removeSslPolicy__60() {

                  return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 14, 64, function ___(__0, __4) { result = __4; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$removeSslPolicy__60() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$removeSslPolicy__60() { _(); }); }); }); }, true)); }, true)); }); },



  showSslPolicy: function showSslPolicy__61(resourceGroup, appGatewayName, options, _) { var self, result, childResult, __this = this; var __frame = { name: "showSslPolicy__61", line: 1446 }; return __func(_, this, arguments, showSslPolicy__61, 3, __frame, function __$showSslPolicy__61() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        childResult = result.sslPolicy;
        if (!childResult) {
          self.output.warn(util.format($("application gateway ssl policy not found in the \"%s\""), result.name)); } ;


        self.interaction.formatOutput(childResult, generatorUtils.traverse); _(); }, true)); }); },


  addAuthCert: function addAuthCert__62(resourceGroup, appGatewayName, name, options, _) { var self, result, authCert, data, __this = this; var __frame = { name: "addAuthCert__62", line: 1461 }; return __func(_, this, arguments, addAuthCert__62, 4, __frame, function __$addAuthCert__62() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if (utils.findFirstCaseIgnore(result.authenticationCertificates, { name: name })) {
          return _(new Error(util.format($("application gateway authentication certificate with name \"%s\" already exists in the \"%s\""), name, appGatewayName))); } ;


        if (!result.authenticationCertificates) {
          result.authenticationCertificates = []; } ;


        authCert = { };
        authCert.name = (name || "default"); return (function __$addAuthCert__62(__then) {

          if (options.certFile) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$addAuthCert__62() {

                  data = fs.readFileSync(options.certFile);
                  authCert.data = data.toString("base64"); __then(); }); })(function ___(err, __result) { __catch(function __$addAuthCert__62() { if (err) {

                    return _(new Error(("Error in reading the provided cert file. Make sure that the file path is correct and it has correct content.\n" + util.inspect(err, {
                      depth: null })))); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(function __$addAuthCert__62() {



          result.authenticationCertificates.push(authCert);
          generatorUtils.removeEmptyObjects(result);
          progress = self.interaction.progress(util.format($("Creating application gateway authentication certificate in \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$addAuthCert__62() {

                return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 32, 64, function ___(__0, __2) { result = __2; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$addAuthCert__62() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$addAuthCert__62() {


              self.interaction.formatOutput(result.authenticationCertificates[generatorUtils.findIndexByKeyValue(result.authenticationCertificates, "name", name)], generatorUtils.traverse); _(); }); }); }); }, true)); }); },


  updateAuthCert: function updateAuthCert__63(resourceGroup, appGatewayName, name, options, _) { var self, result, childResult, index, parameters, data, __this = this; var __frame = { name: "updateAuthCert__63", line: 1501 }; return __func(_, this, arguments, updateAuthCert__63, 4, __frame, function __$updateAuthCert__63() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        childResult = utils.findFirstCaseIgnore(result.authenticationCertificates, { name: name });
        index = utils.indexOfCaseIgnore(result.authenticationCertificates, { name: name });
        if (!childResult) {
          return _(new Error(util.format($("application gateway authentication certificate with name \"%s\" not found in the \"%s\""), name, appGatewayName))); } ;


        parameters = result; return (function __$updateAuthCert__63(__then) {
          if (options.certFile) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$updateAuthCert__63() {

                  data = fs.readFileSync(options.certFile);
                  parameters.authenticationCertificates[index].data = data.toString("base64"); __then(); }); })(function ___(err, __result) { __catch(function __$updateAuthCert__63() { if (err) {

                    return _(new Error(("Error in reading the provided cert file. Make sure that the file path is correct and it has correct content.\n" + util.inspect(err, {
                      depth: null })))); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(function __$updateAuthCert__63() {



          generatorUtils.removeEmptyObjects(result);
          progress = self.interaction.progress(util.format($("Updating application gateway authentication certificate in \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$updateAuthCert__63() {

                return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 27, 64, function ___(__0, __2) { result = __2; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$updateAuthCert__63() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$updateAuthCert__63() {


              self.interaction.formatOutput(result.authenticationCertificates[index], generatorUtils.traverse); _(); }); }); }); }, true)); }); },


  listAuthCerts: function listAuthCerts__64(resourceGroup, appGatewayName, options, _) { var self, result, items, __this = this; var __frame = { name: "listAuthCerts__64", line: 1536 }; return __func(_, this, arguments, listAuthCerts__64, 3, __frame, function __$listAuthCerts__64() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        items = result.authenticationCertificates;
        if ((items.length === 0)) {
          self.output.warn($("No application gateway authentication certificate found")); }
         else {
          self.output.table(items, function(row, item) {
            row.cell($("Name"), item.name);
            row.cell($("Provisioning state"), item.provisioningState); }); } ; _(); }, true)); }); },




  removeAuthCert: function removeAuthCert__65(resourceGroup, appGatewayName, name, options, _) { var self, result, index, __this = this; var __frame = { name: "removeAuthCert__65", line: 1554 }; return __func(_, this, arguments, removeAuthCert__65, 4, __frame, function __$removeAuthCert__65() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __2) { result = __2;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        index = utils.indexOfCaseIgnore(result.authenticationCertificates, { name: name });
        if ((index === -1)) {
          return _(new Error(util.format($("application gateway authentication certificate \"%s\" not found in the application gateway \"%s\""), name, result.name))); } ; return (function __$removeAuthCert__65(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete application gateway authentication certificate \"%s\" from \"%s\"? [y/n] "), name, appGatewayName), __cb(_, __frame, 12, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1553, 17, function ___(__0, __3) { return (function __$removeAuthCert__65(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeAuthCert__65() {



            result.authenticationCertificates.splice(index, 1);
            progress = self.interaction.progress("Deleting application gateway authentication certificate"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$removeAuthCert__65() {

                  return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 19, 64, function ___(__0, __4) { result = __4; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$removeAuthCert__65() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$removeAuthCert__65() { _(); }); }); }); }, true)); }, true)); }); },



  showAuthCert: function showAuthCert__66(resourceGroup, appGatewayName, name, options, _) { var self, result, childResult, __this = this; var __frame = { name: "showAuthCert__66", line: 1579 }; return __func(_, this, arguments, showAuthCert__66, 4, __frame, function __$showAuthCert__66() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        childResult = utils.findFirstCaseIgnore(result.authenticationCertificates, { name: name });
        if (!childResult) {
          self.output.warn(util.format($("application gateway authentication certificate with name \"%s\" not found in the application gateway \"%s\""), name, result.name)); } ;


        self.interaction.formatOutput(childResult, generatorUtils.traverse); _(); }, true)); }); },


  addWafConfig: function addWafConfig__67(resourceGroup, appGatewayName, options, _) { var self, result, __this = this; var __frame = { name: "addWafConfig__67", line: 1594 }; return __func(_, this, arguments, addWafConfig__67, 3, __frame, function __$addWafConfig__67() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        if ((result.sku.tier.toLowerCase() != "waf")) {
          return _(new Error(util.format($("application gateway does not support WebApplicationFirewall with the selected SKU tier \"%s\""), result.sku.tier))); } ;


        if (!result.webApplicationFirewallConfiguration) {
          result.webApplicationFirewallConfiguration = { }; } ;


        if (options.enable) {
          result.webApplicationFirewallConfiguration.enabled = validation.isBool(options.enable, "--enabled"); } ;


        if (options.wafMode) {
          result.webApplicationFirewallConfiguration.firewallMode = options.wafMode; } ;


        generatorUtils.removeEmptyObjects(result);
        progress = self.interaction.progress(util.format($("Creating application gateway waf configuration in \"%s\""), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$addWafConfig__67() {

              return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 26, 64, function ___(__0, __2) { result = __2; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$addWafConfig__67() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$addWafConfig__67() {


            self.interaction.formatOutput(result.webApplicationFirewallConfiguration, generatorUtils.traverse); _(); }); }); }, true)); }); },


  removeWafConfig: function removeWafConfig__68(resourceGroup, appGatewayName, options, _) { var self, result, __this = this; var __frame = { name: "removeWafConfig__68", line: 1628 }; return __func(_, this, arguments, removeWafConfig__68, 3, __frame, function __$removeWafConfig__68() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __2) { result = __2;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ; return (function __$removeWafConfig__68(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete application gateway waf config from \"%s\"? [y/n] "), appGatewayName), __cb(_, __frame, 7, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1627, 17, function ___(__0, __3) { return (function __$removeWafConfig__68(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$removeWafConfig__68() {



            delete result.webApplicationFirewallConfiguration;
            progress = self.interaction.progress("Deleting application gateway waf config"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$removeWafConfig__68() {

                  return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, result, __cb(_, __frame, 14, 64, function ___(__0, __4) { result = __4; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$removeWafConfig__68() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$removeWafConfig__68() { _(); }); }); }); }, true)); }, true)); }); },



  showWafConfig: function showWafConfig__69(resourceGroup, appGatewayName, options, _) { var self, result, childResult, __this = this; var __frame = { name: "showWafConfig__69", line: 1648 }; return __func(_, this, arguments, showWafConfig__69, 3, __frame, function __$showWafConfig__69() { self = __this;

      return self.get(resourceGroup, appGatewayName, __cb(_, __frame, 2, 22, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), appGatewayName, resourceGroup))); } ;


        childResult = result.webApplicationFirewallConfiguration;
        if (!childResult) {
          self.output.warn(util.format($("application gateway waf config not found in the \"%s\""), result.name)); } ;


        self.interaction.formatOutput(childResult, generatorUtils.traverse); _(); }, true)); }); },


  showBackendHealth: function showBackendHealth__70(resourceGroup, appGatewayName, options, _) { var self, result, __this = this; var __frame = { name: "showBackendHealth__70", line: 1663 }; return __func(_, this, arguments, showBackendHealth__70, 3, __frame, function __$showBackendHealth__70() { self = __this;

      return self.networkManagementClient.applicationGateways.backendHealth(resourceGroup, appGatewayName, __cb(_, __frame, 2, 66, function ___(__0, __1) { result = __1;
        if (!result) {
          return _(new Error(util.format($("failed to get backend health data for application gateway with name \"%s\""), appGatewayName))); } ;


        self.interaction.formatOutput(result, generatorUtils.traverse); _(); }, true)); }); },


  _generateResourceId: function(resourceGroup, appGatewayName, resourceType, resourceName) {
    var id = "";
    id += "/subscriptions/";
    id += encodeURIComponent(this.subscriptionId);
    id += "/resourceGroups/";
    id += encodeURIComponent(resourceGroup);
    id += "/providers/";
    id += "Microsoft.Network";
    id += "/applicationGateways/";
    id += encodeURIComponent(appGatewayName);
    id += util.format($("/%s"), resourceType);
    id += util.format($("/%s"), resourceName);
    return id; },


  _getAttributeNames: function(list) {
    var namesString = "[";
    var counter = 0;
    list.forEach(function(item) {
      if ((counter > 0)) {
        namesString += ", "; } ;

      namesString += item.name;
      counter++; });

    namesString += "]";
    return namesString; },


  _getSubscriptionId: function(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    var client = utils.createResourceClient(subscription);
    return client.credentials.subscriptionId; },


  _listAppGatewayFrontendIpConfigs: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.frontendIPConfigurations, function(frontendPorts) {
      frontendPorts.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Allocation method"), item.privateIPAllocationMethod, indent);
        self.output.nameValue($("Private IP address"), item.privateIPAddress, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewayFrontendPorts: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.frontendPorts, function(frontendPorts) {
      frontendPorts.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Port"), item.port, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewayHttpListeners: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.httpListeners, function(listeners) {
      listeners.forEach(function(listener) {
        self._showAppGatewayHttpListener(listener, indent); }); }); },




  _listAppGatewayAddressPools: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.backendAddressPools, function(pools) {
      var formattedPools = [];
      var index = 0;
      pools.forEach(function(pool) {
        formattedPools.push({ name: pool.name, ips: [] });
        pool.backendAddresses.forEach(function(ip) {
          formattedPools[index].ips.push(ip.ipAddress); });

        index++; });


      formattedPools.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.header($("IP Addresses"), indent);
        self.output.list(item.ips, (indent + 2));
        self.output.data($(""), ""); }); }); },




  _listAppGatewayProbes: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.probes, function(probes) {
      probes.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Protocol"), item.protocol, indent);
        self.output.nameValue($("Host"), item.host, indent);
        self.output.nameValue($("Path"), item.path, indent);
        self.output.nameValue($("Interval"), item.interval, indent);
        self.output.nameValue($("Timeout"), item.timeout, indent);
        self.output.nameValue($("Unhealthy Threshold"), item.unhealthyThreshold, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewaySslCerificates: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.sslCertificates, function(sslCerts) {
      sslCerts.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Provisioning State"), item.provisioningState, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewayHttpSettings: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.backendHttpSettingsCollection, function(httpSettings) {
      httpSettings.forEach(function(item) {
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Protocol"), item.protocol, indent);
        self.output.nameValue($("Port"), item.port, indent);
        self.output.nameValue($("Timeout"), item.requestTimeout, indent);
        self.output.nameValue($("Cookie Based Affinity"), item.cookieBasedAffinity, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewayRoutingRules: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.requestRoutingRules, function(routingRules) {
      routingRules.forEach(function(item) {
        var listener = resourceUtils.getResourceInformation(item.httpListener.id);
        self.output.nameValue($("Name"), item.name, indent);
        self.output.nameValue($("Rule Type"), item.ruleType, indent);
        self.output.nameValue($("Listener"), listener.resourceName, indent);
        self.output.data($(""), ""); }); }); },




  _listAppGatewayUrlPathMaps: function(appGateway, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(appGateway.urlPathMaps, function(urlPathMaps) {
      urlPathMaps.forEach(function(urlPathMap) {
        self._showAppGatewayUrlPathMap(urlPathMap, indent); }); }); },




  _listAppGatewayUrlPathMapRules: function(rules, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(rules, function(rules) {
      if ((rules.length > 0)) {
        self.output.header($("Rules"), indent);
        indent += 2;
        rules.forEach(function(rule) {
          self._showAppGatewayUrlPathMapRule(rule, indent); }); } ; }); },





  _parseDnsServers: function(options) {
    var self = this;

    var ipAddresses = options.servers.split(",");
    var dnsServers = [];

    ipAddresses.forEach(function(address) {
      var ipValidationResult = self.vnetUtil.parseIPv4(address);
      if (ipValidationResult.error) {
        var dnsValidationResult = self.vnetUtil.isValidDns(address);
        if ((dnsValidationResult === false)) {
          throw new Error(util.format($("Address \"%s\" is not valid IPv4 or DNS name"), address)); } ; } ;


      var dns = { ipAddress: address };
      dnsServers.push(dns); });


    return dnsServers; },


  _parseFrontendIp: function _parseFrontendIp__71(resourceGroup, appGatewayName, frontendIpName, options, _) { var self, frontendIp, ipValidationResult, publicIp, subnet, __this = this; var __frame = { name: "_parseFrontendIp__71", line: 1879 }; return __func(_, this, arguments, _parseFrontendIp__71, 4, __frame, function __$_parseFrontendIp__71() { self = __this;

      frontendIp = {
        id: self._generateResourceId(resourceGroup, appGatewayName, "frontendIPConfigurations", frontendIpName),
        name: frontendIpName,
        privateIPAllocationMethod: constants.appGateway.frontendIp.privateIPAllocationMethod[0] };


      if (options.staticIpAddress) {
        ipValidationResult = self.vnetUtil.parseIPv4(options.staticIpAddress);
        if (ipValidationResult.error) {
          return _(new Error(util.format($("IPv4 %s static ip address is not valid"), options.staticIpAddress))); } ;

        frontendIp.privateIPAddress = options.staticIpAddress; } ;


      if (options.publicIpId) {
        frontendIp.publicIPAddress = options.publicIpId;
        return _(null, frontendIp); } ; return (function __$_parseFrontendIp__71(__then) {


        if (options.publicIpName) {
          return self.publicIpCrud.get(resourceGroup, options.publicIpName, __cb(_, __frame, 22, 39, function ___(__0, __1) { publicIp = __1;
            if (!publicIp) {
              return _(new Error(util.format($("Public IP \"%s\" not found in resource group \"%s\""), options.publicIpName, resourceGroup))); } ;

            frontendIp.publicIPAddress = { id: publicIp.id };
            return _(null, frontendIp); }, true)); } else { __then(); } ; })(function __$_parseFrontendIp__71() { return (function __$_parseFrontendIp__71(__then) {


          if ((options.vnetName && options.subnetName)) {
            return self.subnetCrud.get(resourceGroup, options.vnetName, options.subnetName, __cb(_, __frame, 31, 35, function ___(__0, __2) { subnet = __2;
              if (!subnet) {
                return _(new Error(util.format($("Subnet \"%s\" not found in virtual network \"%s\" resource group \"%s\""), options.subnetName, options.vnetName, resourceGroup))); } ;

              frontendIp.subnet = { id: subnet.id };
              return _(null, frontendIp); }, true)); } else { __then(); } ; })(function __$_parseFrontendIp__71() {


          if (options.subnetId) {
            frontendIp.subnet = { id: options.subnetId }; } ;


          return _(null, frontendIp); }); }); }); },


  _parseHttpSettings: function(resourceGroup, appGatewayName, httpSettings, options, useDefaults) {
    var self = this;
    if (options.protocol) {
      var protocol = utils.verifyParamExistsInCollection(constants.appGateway.settings.protocol, options.protocol, "--protocol");

      httpSettings.protocol = utils.capitalizeFirstLetter(protocol); }
     else if (useDefaults) {
      self.output.warn(util.format($("Using default protocol: %s"), constants.appGateway.settings.protocol[0]));
      httpSettings.protocol = constants.appGateway.settings.protocol[0]; }  ;


    if (options.port) {
      var portAsInt = utils.parseInt(options.port);
      if (((isNaN(portAsInt) || (portAsInt < constants.appGateway.settings.port[0])) || (portAsInt > constants.appGateway.settings.port[1]))) {
        throw new Error(util.format($("port parameter must be an integer in range %s"), utils.toRange(constants.appGateway.settings.port))); } ;


      httpSettings.port = portAsInt; } ;


    if (options.cookieBasedAffinity) {
      var cookieBasedAffinity = utils.verifyParamExistsInCollection(constants.appGateway.settings.affinity, options.cookieBasedAffinity, "--cookie-based-affinity");

      httpSettings.cookieBasedAffinity = utils.capitalizeFirstLetter(cookieBasedAffinity); }
     else if (useDefaults) {
      self.output.warn(util.format($("Using default cookie based affinity: %s"), constants.appGateway.settings.affinity[0]));
      httpSettings.cookieBasedAffinity = constants.appGateway.settings.affinity[0]; }  ;


    if (options.probeId) {
      httpSettings.probe = {
        id: options.probeId };

      if (options.probeName) {
        self.output.warn(util.format($("both --probe-name and --probe-id were entered. --probe-name parameter would be excluded"))); } ; }

     else if (options.probeName) {
      self.subscriptionId = self._getSubscriptionId(options);
      httpSettings.probe = {
        id: self._generateResourceId(resourceGroup, appGatewayName, "probes", options.probeName) }; }  ;



    return httpSettings; },


  _parseProbe: function(resourceGroup, appGatewayName, probe, options, useDefaults) {
    var self = this;

    if (options.protocol) {
      var protocol = utils.verifyParamExistsInCollection(constants.appGateway.settings.protocol, options.protocol, "--protocol");

      probe.protocol = utils.capitalizeFirstLetter(protocol); } ;

    if (options.port) {
      if (((options.port < constants.appGateway.settings.port[0]) || (options.port > constants.appGateway.settings.port[1]))) {
        throw new Error(util.format($("A frontend port value must be in range [%s]"), constants.appGateway.settings.port)); } ;

      probe.port = options.port; } ;

    if (options.hostName) {
      probe.host = options.hostName; }
     else if (useDefaults) {
      self.output.warn(util.format($("Using default probe host name: %s"), constants.appGateway.probe.host));
      probe.host = constants.appGateway.probe.host; }  ;

    if (options.path) {
      probe.path = options.path; }
     else if (useDefaults) {
      self.output.warn(util.format($("Using default probe path: %s"), constants.appGateway.probe.path));
      probe.path = constants.appGateway.probe.path; }  ;

    if (options.interval) {
      probe.interval = parseInt(options.interval);
      if (isNaN(probe.interval)) {
        throw new Error($("Parameter --interval must be a number")); } ; }

     else if (useDefaults) {
      self.output.warn(util.format($("Using default interval: %s"), constants.appGateway.probe.interval));
      probe.interval = constants.appGateway.probe.interval; }  ;

    if (options.timeout) {
      probe.timeout = parseInt(options.timeout);
      if (isNaN(probe.timeout)) {
        throw new Error($("Parameter --timeout must be a number")); } ; }

     else if (useDefaults) {
      self.output.warn(util.format($("Using default timeout: %s"), constants.appGateway.probe.timeout));
      probe.timeout = constants.appGateway.probe.timeout; }  ;

    if (options.unhealthyThreshold) {
      probe.unhealthyThreshold = parseInt(options.unhealthyThreshold);
      if (isNaN(probe.unhealthyThreshold)) {
        throw new Error($("Parameter --unhealthy-threshold must be a number")); } ; }

     else if (useDefaults) {
      self.output.warn(util.format($("Using default unhealthy threshold: %s"), constants.appGateway.probe.unhealthyThreshold));
      probe.unhealthyThreshold = constants.appGateway.probe.unhealthyThreshold; }  ;

    return probe; },


  _setAppGateway: function _setAppGateway__72(resourceGroup, appGatewayName, appGateway, options, _) { var self, progress, updatedAppGateway, __this = this; var __frame = { name: "_setAppGateway__72", line: 2027 }; return __func(_, this, arguments, _setAppGateway__72, 4, __frame, function __$_setAppGateway__72() { self = __this;


      progress = self.interaction.progress(util.format($("Setting long-running configuration for an application gateway %s"), appGatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_setAppGateway__72() { return (function __$_setAppGateway__72(__then) {


              if (options.nowait) {
                return self.networkManagementClient.applicationGateways.beginCreateOrUpdate(resourceGroup, appGatewayName, appGateway, null, __cb(_, __frame, 7, 77, function ___(__0, __1) { updatedAppGateway = __1; __then(); }, true)); } else {

                return self.networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, appGatewayName, appGateway, null, __cb(_, __frame, 9, 77, function ___(__0, __2) { updatedAppGateway = __2; __then(); }, true)); } ; })(function __$_setAppGateway__72() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$_setAppGateway__72() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$_setAppGateway__72() {

          self._showAppGateway(updatedAppGateway); _(); }); }); }); },


  _setDefaultAttributes: function(options) {
    var self = this;
    if (options.certFile) {
      if (options.httpListenerProtocol) {


        if ((options.httpListenerProtocol.toLowerCase() !== constants.appGateway.httpListener.protocol[1])) {
          throw new Error($("--http-listener-protocol parameter must be Https")); } ; }

       else {
        options.httpListenerProtocol = constants.appGateway.httpListener.protocol[1];
        self.output.warn(util.format($("Using default http listener protocol: %s"), options.httpListenerProtocol)); } ;

      options.certName = "cert01";
      if (utils.stringIsNullOrEmpty(options.certFile)) {
        throw new Error($("--cert-file parameter must not be empty")); } ;

      if (utils.stringIsNullOrEmpty(options.certPassword)) {
        throw new Error($("--cert-password parameter must not be empty")); } ; } ;


    if (!options.gatewayIpName) {
      options.gatewayIpName = constants.appGateway.gatewayIp.name;
      self.output.warn(util.format($("Using default gateway ip name: %s"), options.gatewayIpName)); } ;

    if (!options.skuName) {
      options.skuName = constants.appGateway.sku.name[0];
      self.output.warn(util.format($("Using default sku name: %s"), options.skuName)); } ;

    if (!options.skuTier) {
      options.skuTier = constants.appGateway.sku.tier[0];
      self.output.warn(util.format($("Using default sku tier: %s"), options.skuTier)); } ;

    if (!options.capacity) {
      options.capacity = constants.appGateway.sku.capacity[0];
      self.output.warn(util.format($("Using default sku capacity: %s"), options.capacity)); }
     else {
      if (((options.capacity < constants.appGateway.sku.capacity[0]) || (options.capacity > constants.appGateway.sku.capacity[1]))) {
        throw new Error(util.format($("Application gateway instance count must be in range \"[%s]\""), constants.appGateway.sku.capacity)); } ; } ;


    if (!options.frontendIpName) {
      options.frontendIpName = constants.appGateway.frontendIp.name;
      self.output.warn(util.format($("Using default frontend ip name: %s"), options.frontendIpName)); } ;

    if (!options.frontendPortName) {
      options.frontendPortName = constants.appGateway.frontendPort.name;
      self.output.warn(util.format($("Using default frontend port name: %s"), options.frontendPortName)); } ;

    if (!options.frontendPort) {
      options.frontendPort = (options.certFile ? constants.appGateway.settings.defHttpsPort : constants.appGateway.settings.defHttpPort);
      self.output.warn(util.format($("Using default frontend port: %s"), options.frontendPort)); } ;

    if (!options.addressPoolName) {
      options.addressPoolName = constants.appGateway.pool.name;
      self.output.warn(util.format($("Using default address pool name: %s"), options.addressPoolName)); } ;

    if (!options.httpSettingsName) {
      options.httpSettingsName = constants.appGateway.settings.name;
      self.output.warn(util.format($("Using default http settings name: %s"), options.httpSettingsName)); } ;

    if (!options.httpSettingsProtocol) {
      options.httpSettingsProtocol = constants.appGateway.settings.protocol[0];
      self.output.warn(util.format($("Using default http settings protocol: %s"), options.httpSettingsProtocol)); } ;

    if (!options.httpSettingsPort) {
      options.httpSettingsPort = constants.appGateway.settings.defHttpPort;
      self.output.warn(util.format($("Using default http settings port: %s"), options.httpSettingsPort)); } ;

    if (!options.httpSettingsCookieBasedAffinity) {
      options.httpSettingsCookieBasedAffinity = constants.appGateway.settings.affinity[0];
      self.output.warn(util.format($("Using default http settings cookie based affinity: %s"), options.httpSettingsCookieBasedAffinity)); } ;

    if (!options.httpListenerName) {
      options.httpListenerName = constants.appGateway.httpListener.name;
      self.output.warn(util.format($("Using default http listener name: %s"), options.httpListenerName)); } ;

    if (!options.routingRuleName) {
      options.routingRuleName = constants.appGateway.routingRule.name;
      self.output.warn(util.format($("Using default request routing rule name: %s"), options.routingRuleName)); } ;

    if (!options.routingRuleType) {
      options.routingRuleType = constants.appGateway.routingRule.type[0];
      self.output.warn(util.format($("Using default request routing rule type: %s"), options.routingRuleType)); } ;

    return options; },


  _showAppGateway: function(appGateway) {
    var self = this;
    self.interaction.formatOutput(appGateway, function(appGateway) {
      var indent = 2;
      self.output.nameValue($("Id"), appGateway.id);
      self.output.nameValue($("Name"), appGateway.name);
      self.output.nameValue($("Location"), appGateway.location);
      self.output.nameValue($("Provisioning state"), appGateway.provisioningState);
      self.output.nameValue($("Sku"), appGateway.sku.name);

      var resource = resourceUtils.getResourceInformation(appGateway.id);
      self.output.nameValue($("Resource Group"), resource.resourceGroup);
      self.output.nameValue($("Tags"), tagUtils.getTagsInfo(appGateway.tags));
      self.output.nameValue($("Gateway IP configations"), self._getAttributeNames(appGateway.gatewayIPConfigurations));
      if (utils.findFirstCaseIgnore(appGateway.httpListeners, { protocol: constants.appGateway.httpListener.protocol[1] })) {
        self.output.header($("SSL cerificates"));
        self._listAppGatewaySslCerificates(appGateway, indent); } ;

      self.output.header($("Frontend ip configurations"));
      self._listAppGatewayFrontendIpConfigs(appGateway, indent);
      self.output.header($("Frontend ports"));
      self._listAppGatewayFrontendPorts(appGateway, indent);
      self.output.header($("Backend address pools"));
      self._listAppGatewayAddressPools(appGateway, indent);
      self.output.header($("Backend http settings"));
      self._listAppGatewayHttpSettings(appGateway, indent);
      self.output.header($("Http listeners"));
      self._listAppGatewayHttpListeners(appGateway, indent);
      self.output.header($("Request routing rules"));
      self._listAppGatewayRoutingRules(appGateway, indent);
      self.output.header($("Probes"));
      self._listAppGatewayProbes(appGateway, indent);
      self.output.header($("Url Path Maps"));
      self._listAppGatewayUrlPathMaps(appGateway, indent); }); },



  _showAppGatewayHttpListener: function(listener, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(listener, function(listener) {
      var sslCertificateName = "";
      var frontendIPConfiguration = resourceUtils.getResourceInformation(listener.frontendIPConfiguration.id);
      var frontendPort = resourceUtils.getResourceInformation(listener.frontendPort.id);
      if (listener.sslCertificate) {
        sslCertificateName = resourceUtils.getResourceInformation(listener.sslCertificate.id).resourceName; } ;


      self.output.nameValue($("Name"), listener.name, indent);
      self.output.nameValue($("Frontend IP config name"), frontendIPConfiguration.resourceName, indent);
      self.output.nameValue($("Frontend port name"), frontendPort.resourceName, indent);
      self.output.nameValue($("SSL certificate name"), sslCertificateName, indent);
      self.output.nameValue($("Protocol"), listener.protocol, indent);
      self.output.data($(""), ""); }); },



  _showAppGatewayUrlPathMap: function(urlPathMap, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(urlPathMap, function(urlPathMap) {
      var urlPathName = resourceUtils.getResourceInformation(urlPathMap.id);
      var defaultAddressPool = resourceUtils.getResourceInformation(urlPathMap.defaultBackendAddressPool.id);
      var defaultHttpSetting = resourceUtils.getResourceInformation(urlPathMap.defaultBackendHttpSettings.id);

      self.output.nameValue($("Name"), urlPathName.resourceName, indent);
      self.output.nameValue($("Pool Name"), defaultAddressPool.resourceName, indent);
      self.output.nameValue($("Http Setting Name"), defaultHttpSetting.resourceName, indent);

      self._listAppGatewayUrlPathMapRules(urlPathMap.pathRules, indent); }); },



  _showAppGatewayUrlPathMapRule: function(rule, indent) {
    var self = this;

    if (!indent) { indent = 0; };
    self.interaction.formatOutput(rule, function(rule) {
      var addressPool = resourceUtils.getResourceInformation(rule.backendAddressPool.id);
      var httpSetting = resourceUtils.getResourceInformation(rule.backendHttpSettings.id);

      self.output.nameValue($("Name"), rule.name, indent);
      self.output.nameValue($("Address Pool Name"), addressPool.resourceName, indent);
      self.output.nameValue($("Http Settings Name"), httpSetting.resourceName, indent);
      if ((rule.paths.length > 0)) {
        self.output.header($("Paths"), indent);
        self.output.list(rule.paths, (indent + 2)); } ;

      self.output.data($(""), ""); }); }});




module.exports = AppGateways;
